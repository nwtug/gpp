DROP TABLE IF EXISTS queries;
CREATE TABLE IF NOT EXISTS queries (
  id bigint(20) NOT NULL,
  `code` varchar(300) NOT NULL,
  details text NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=261 DEFAULT CHARSET=latin1;

INSERT INTO queries (id, code, details) VALUES
(1, 'get_user_by_id', 'SELECT U.*, \n\nIF((SELECT id FROM bank_accounts WHERE _user_id=''_USER_ID_'' AND status=''active'' LIMIT 1) IS NOT NULL, ''Y'', ''N'') AS has_linked_accounts,\n\n(SELECT P.full_carrier_name FROM contact_phones C \n	LEFT JOIN contact_phone_providers P ON (P.id=C._provider_id) \n	WHERE C._user_id=''_USER_ID_'' AND C.telephone=U.telephone AND U.telephone <> '''' AND C._user_id=''_USER_ID_'' LIMIT 1\n) AS telephone_carrier \n\nFROM users U WHERE id =''_USER_ID_'''),
(2, 'get_provider_list', 'SELECT * FROM contact_phone_providers WHERE full_carrier_name LIKE ''_SEARCH_PHRASE_'' _LIMIT_TEXT_'),
(4, 'get_store_details_by_id', 'SELECT A.* FROM \n(SELECT id, \ncap_first_letter_in_words(name) AS storeName, \ncap_first_letter_in_words(CONCAT(address_line_1, '' '', address_line_2, '' '', city,'' '', state, '', '', zipcode, '' '', _country_code)) AS address, \naddress_line_2, latitude, longitude, city, state, zipcode, description, \n_country_code AS country, \n(SELECT COUNT(id) FROM reviews WHERE _store_id=S.id) AS reviewCount, \n(SELECT AVG(review_score) FROM reviews WHERE _store_id=S.id) AS averageReviewScore, \nget_distance(_LATITUDE_, _LONGITUDE_, S.latitude, S.longitude) AS distance,\nget_store_score(''_USER_ID_'', S.id) AS storeScore,\nhas_perk(''_USER_ID_'', S.id) AS hasPerk,\nget_cashback_range(''_USER_ID_'', S.id, ''min'') AS minCashBack,\nget_cashback_range(''_USER_ID_'', S.id, ''max'') AS maxCashBack,\n(SELECT COUNT(id) FROM store_photos WHERE _store_id=S.id) AS photoCount, \nLOWER(S.website) AS website, \nS.phone_number AS telephone, \n(SELECT C1.name FROM categories_level_1 C1 WHERE C1.id IN (SELECT SC._category_id FROM store_sub_categories SC WHERE SC._store_id=S.id) LIMIT 1) AS category,\nIF((SELECT id FROM store_favorites WHERE _user_id=''_USER_ID_'' AND _store_id=S.id LIMIT 1) IS NOT NULL, ''Y'', ''N'') AS isFavorite,\nIF((SELECT id FROM store_offer_requests WHERE _user_id=''_USER_ID_'' AND _store_id=S.id LIMIT 1) IS NOT NULL, ''Y'', ''N'') AS isOnVip\n \nFROM stores S WHERE S.id=''_STORE_ID_'') A'),
(5, 'get_clout_score', 'SELECT *, total_score AS clout_score FROM cacheview__clout_score WHERE user_id=''_USER_ID_'''),
(6, 'get_store_score', 'SELECT get_store_score(''_USER_ID_'', ''_STORE_ID_'') AS store_score'),
(7, 'get_score_level', 'SELECT A.level AS level, \nIF((SELECT id FROM score_levels WHERE level > A.level LIMIT 1) IS NULL, 0, \n(SELECT (high_end_score - _SCORE_)+1 FROM score_levels WHERE level=A.level LIMIT 1)) AS points_to_next_level\nFROM \n(SELECT MAX(level+0) AS level FROM score_levels WHERE low_end_score <= _SCORE_) A'),
(8, 'get_a_store_score_cache', 'SELECT * FROM cacheview__store_score_by_store LIMIT 1'),
(9, 'get_a_clout_score_cache', 'SELECT * FROM cacheview__clout_score LIMIT 1'),
(10, 'get_content_explanation', 'SELECT * FROM system_content WHERE content_code IN(_CODE_LIST_) AND is_active=''Y'''),
(11, 'get_score_criteria_description', 'SELECT * FROM score_criteria WHERE code IN (_CRITERIA_LIST_) _QUERY_PART_'),
(13, 'get_store_score_details', 'SELECT A.* FROM (\r\n(SELECT * FROM cacheview__store_score_by_store WHERE store_id=''_STORE_ID_'' AND user_id=''_USER_ID_'' LIMIT 1) \r\nUNION \r\n(SELECT * FROM cacheview__store_score_by_category WHERE user_id=''_USER_ID_'' AND sub_category_id IN \r\n	(SELECT B1.id FROM categories_level_2 B1 LEFT JOIN store_sub_categories C ON (B1.id=C._sub_category_id) WHERE C._store_id=''_STORE_ID_'') \r\nORDER BY total_score DESC LIMIT 1) \r\nUNION \r\n(SELECT * FROM cacheview__store_score_by_default WHERE user_id=''_USER_ID_'' LIMIT 1)) A LIMIT 1;'),
(14, 'get_score_level_data', 'SELECT * FROM score_levels WHERE 1=1 _CONDITION_ _ORDER_BY_'),
(15, 'get_promotions_within_score_range', 'SELECT *, id AS promotion_id FROM cacheview__promotions_summary WHERE owner_id=''_STORE_ID_'' AND promotion_type IN (_PROMOTION_TYPES_) AND (_SCORE_ BETWEEN start_score AND end_score OR (_SCORE_ >= 1000 AND end_score = 1000)) _ADDITIONAL_CONDITIONS_  _ORDER_CONDITION_ _LIMIT_TEXT_'),
(16, 'get_promotion_by_id', 'SELECT P.*, S.id AS store_id, S.name, S.logo_url, S.small_cover_image, S.large_cover_image FROM promotions P LEFT JOIN stores S ON (P.owner_id=S.id) WHERE P.id=''_PROMOTION_ID_'''),
(17, 'get_rule_for_promotion', 'SELECT * FROM promotion_rules WHERE _promotion_id=''_PROMOTION_ID_'' AND rule_type=''_RULE_TYPE_'''),
(18, 'get_promotion_rules', 'SELECT * FROM promotion_rules WHERE _promotion_id=''_PROMOTION_ID_'''),
(19, 'get_store_locations_by_id', 'SELECT S.*, \r\nIF((SELECT id FROM store_favorites WHERE _store_id=S.id AND _user_id=''_USER_ID_'' LIMIT 1) IS NULL, ''N'', ''Y'') AS is_favorite, \r\nCONCAT(address_line_1, '', '', city, '' '', state, '', '', zipcode, '' '', _country_code) AS full_address\r\n\r\nFROM stores S \r\nWHERE S.id IN (SELECT S2.id FROM stores S1 LEFT JOIN stores S2 ON (S1._store_owner_id=S2._store_owner_id) \r\n	WHERE S1.id=''_STORE_ID_'' AND S1._store_owner_id <> ''3'')'),
(20, 'add_user_checkin', 'INSERT INTO user_geo_tracking (_user_id, tracking_time, longitude, latitude, address, city, zipcode, state, _checkin_store_id, _checkin_offer_id, details, source ) VALUES (''_USER_ID_'', NOW(), ''_LONGITUDE_'', ''_LATITUDE_'', ''_ADDRESS_'', ''_CITY_'', ''_ZIPCODE_'', ''_STATE_'', ''_STORE_ID_'', ''_OFFER_ID_'', ''_DETAILS_'', ''_SOURCE_'' )'),
(21, 'add_store_schedule', 'INSERT INTO store_schedule (_store_id, _promotion_id, scheduler_name, scheduler_email, scheduler_phone, schedule_date, number_in_party, special_request, date_entered, _entered_by, last_updated, _last_updated_by) \n\n(SELECT owner_id AS _store_id, ''_PROMOTION_ID_'' AS _promotion_id, ''_SCHEDULER_NAME_'' AS scheduler_name, ''_SCHEDULER_EMAIL_'' AS scheduler_email, ''_SCHEDULER_PHONE_'' AS scheduler_phone, ''_SCHEDULE_DATE_'' AS schedule_date, ''_NUMBER_IN_PARTY_'' AS number_in_party, ''_SPECIAL_REQUEST_'' AS special_request, NOW() AS date_entered, ''_USER_ID_'' AS _entered_by, NOW() AS last_updated, ''_USER_ID_'' AS _last_updated_by FROM promotions WHERE id=''_PROMOTION_ID_'' LIMIT 1)'),
(22, 'get_sending_format', 'SELECT * FROM user_preferred_communication WHERE _user_id=''_USER_ID_'' AND message_type=''_MESSAGE_TYPE_'' AND message_format=''_MESSAGE_FORMAT_'''),
(23, 'get_store_staff', 'SELECT * FROM store_staff WHERE _store_id=''_STORE_ID_'''),
(24, 'get_cron_schedules', 'SELECT * FROM cron_schedule WHERE is_done=''_IS_DONE_'' _EXTRA_CONDITIONS_ _LIMIT_TEXT_'),
(25, 'add_event_log', 'INSERT INTO activity_log (user_id, activity_code, result, uri, log_details, ip_address, event_time)\r\nVALUES (''_USER_ID_'', ''_ACTIVITY_CODE_'', ''_RESULT_'', ''_URI_'', ''_LOG_DETAILS_'', ''_IP_ADDRESS_'', NOW())'),
(26, 'get_message_template', 'SELECT *, copy_admin AS copyadmin FROM message_templates WHERE message_type=''_MESSAGE_TYPE_'''),
(27, 'get_provider_email_domain', 'SELECT IF(P.mms_email_domain <>'''',P.mms_email_domain,P.sms_email_domain) AS email_domain FROM contact_phones C LEFT JOIN contact_phone_providers P ON (C._provider_id=P.id) WHERE telephone=''_TELEPHONE_'' LIMIT 1'),
(28, 'record_message_exchange', 'INSERT INTO message_exchange (_template_id, details, `subject`, attachment_url, _sender_id, _recipient_id, date_entered)\n\n(SELECT T.id AS _template_id, ''_DETAILS_'' AS details, ''_SUBJECT_'' AS `subject`, ''_ATTACHMENT_URL_'' AS attachment_url, \n''_SENDER_ID_'' AS _sender_id, \nU.id AS _recipient_id, NOW() AS date_entered\nFROM message_templates T LEFT JOIN users U ON (U.id IN (''_RECIPIENT_ID_'')) WHERE T.message_type=''_TEMPLATE_CODE_'')\n\nON DUPLICATE KEY UPDATE `subject`=VALUES(`subject`), details=VALUES(details), attachment_url=VALUES(attachment_url), date_entered=VALUES(date_entered);'),
(29, 'get_users_in_id_list', 'SELECT first_name, last_name, gender, email_address, telephone, id AS user_id, CONCAT(first_name, '' '', last_name) AS user_name FROM users WHERE id IN (''_ID_LIST_'')'),
(30, 'get_schedule_details', 'SELECT P.owner_id AS store_id, S.name AS store_name, CONCAT(S.address_line_1,'' '', S.address_line_2, '', '', S.city, '' '', S.state, '' '', S.zipcode) AS store_address, P.date_entered AS offer_date, P.description AS offer_description, \n(SELECT GROUP_CONCAT(rule_details SEPARATOR '', '') FROM promotion_rules WHERE _promotion_id=P.id) AS  offer_conditions \nFROM promotions P LEFT JOIN stores S ON (P.owner_id=S.id) WHERE P.id=''_PROMOTION_ID_'''),
(31, 'get_bank_list', 'SELECT id AS bank_id, institution_name AS bank_name, logo_url, institution_code AS bank_code, \n\nIF(institution_name = ''_PHRASE_'', 1,\nIF(institution_name LIKE CONCAT(''_PHRASE_'',''%''), 2, \nIF(institution_name LIKE CONCAT(''%'',''_PHRASE_'',''%''), 3, \nIF(institution_name LIKE CONCAT(''%'',''_PHRASE_''), 4, \n5)))) AS priority\n\nFROM banks \nWHERE is_featured IN (_FEATURED_STATUS_) \nAND ((''_PHRASE_'' <> '''' AND MATCH(institution_name) AGAINST (''_PHRASE_'')) OR ''_PHRASE_'' = '''') \n\n_CODE_CONDITION_\n\nORDER BY priority, institution_name \n_LIMIT_TEXT_'),
(32, 'get_transaction_status_summary', '(SELECT ''all_transactions'' AS status_code, ''All Transactions'' AS status_string) \nUNION \n(SELECT ''admin_matched'' AS status_code, ''Admin Matched'' AS status_string) \nUNION \n(SELECT ''auto_matched'' AS status_code, ''Auto-Matched'' AS status_string) \nUNION \n(SELECT ''edits_pending'' AS status_code, ''Edits Pending'' AS status_string) \nUNION \n(SELECT ''has_problem_flag'' AS status_code, ''Has Problem Flag'' AS status_string) \nUNION \n(SELECT ''not_found'' AS status_code, ''Not Found'' AS status_string) \nUNION \n(SELECT ''unqualified'' AS status_code, ''Unqualified'' AS status_string) '),
(33, 'get_transaction_scope_list', 'SELECT id AS scope_id, scope_name, IF(''_DESCRIPTOR_ID_'' <> '''' AND (SELECT _scope_id FROM transaction_descriptors WHERE id=''_DESCRIPTOR_ID_'' LIMIT 1) = id, ''Y'', ''N'') AS is_selected FROM transaction_descriptor_scopes'),
(34, 'get_transaction_problem_flags', 'SELECT F.id, F.name\n FROM flags F WHERE F.`type`=''problem'' ORDER BY F.`name` '),
(35, 'get_category_level_1_list', 'SELECT C1.id, C1.name,''N'' AS is_selected\n\nFROM `categories_level_1` C1 WHERE C1.is_active=''Y'' ORDER BY C1.name ASC'),
(36, 'get_category_level_2_list', 'SELECT C2.id, C2.name, C2._category_id AS level_1_id,\r\nIF((SELECT CS.id FROM transaction_descriptor_sub_categories CS WHERE CS._sub_category_id=C2.id AND CS._descriptor_id=''_DESCRIPTOR_ID_'' ) IS NOT NULL, ''Y'',''N'') AS is_selected\r\n\r\n FROM categories_level_2 C2 WHERE C2.is_active = ''Y'' ORDER BY name'),
(37, 'get_match_attempts_by_descriptor', 'SELECT M._matched_chain_id AS id, \nC.name AS location_name, \n\nCONCAT(C.address_line_1, '' '', C.city, '' '', C.state, '', '', C.zipcode) AS location_address, \n\n(SELECT CT.name FROM categories_level_1 CT LEFT JOIN chain_categories CC ON (CC._category_id=CT.id) WHERE CC._chain_id=M._matched_chain_id LIMIT 1) AS chain_category,\n\nIF((SELECT id FROM transaction_descriptor_chains WHERE _chain_id=M._matched_chain_id LIMIT 1), ''Y'', ''N'') AS is_selected,\n\nIF(C.is_live=''Y'',''N'',''Y'') AS is_new_chain, \n\n(SELECT COUNT(DISTINCT CR.id) FROM chain_references CR\nLEFT JOIN transaction_descriptor_chains TC ON (CR._chain_id=TC._chain_id) WHERE TC._transaction_descriptor_id=T._descriptor_id) AS link_count, \n\nC.name AS chain_name \n\nFROM transaction_descriptor_transactions T \nLEFT JOIN match_history_chains M ON (M._raw_transaction_id=T._transactions_raw_id) \nLEFT JOIN chains C ON (C.id=M._matched_chain_id)\nWHERE T._descriptor_id=''_DESCRIPTOR_ID_'''),
(38, 'get_descriptor_change_flags', 'SELECT C.id AS flag_id, C._change_id AS change_id, F.name AS flag_name \nFROM change_flags C \nLEFT JOIN flags F ON (C._flag_id=F.id) \nWHERE C._change_id=''_CHANGE_ID_'' AND F.name LIKE ''_PHRASE_'' _LIMIT_TEXT_'),
(39, 'get_flag_by_descriptor_change', 'SELECT F.name AS flag_name, C._transaction_descriptor_id AS descriptor_id, CF._change_id AS change_id, C.description AS change_name \r\nFROM change_flags CF \r\nLEFT JOIN flags F ON (F.id=CF._flag_id) \r\nLEFT JOIN changes C ON (CF._change_id=C.id)\r\n\r\nWHERE CF.id=''_CHANGE_FLAG_ID_'''),
(40, 'add_change_record', 'INSERT INTO changes (_transaction_descriptor_id, description, change_code, change_value, date_entered, _entered_by) VALUES \n\n(''_DESCRIPTOR_ID_'', ''_DESCRIPTION_'', ''_CHANGE_CODE_'', ''_CHANGE_VALUE_'', NOW(), ''_USER_ID_'')'),
(41, 'add_change_log', 'INSERT INTO change_log (_change_id, old_status, new_status, date_entered, _entered_by) VALUES \r\n\r\n(''_CHANGE_ID_'', ''_OLD_STATUS_'', ''_NEW_STATUS_'', NOW(), ''_USER_ID_'')'),
(42, 'get_all_change_flags', 'SELECT id AS flag_id, name AS flag_name FROM flags WHERE type=''user_defined'' AND name LIKE ''_PHRASE_'' _LIMIT_TEXT_'),
(43, 'add_new_flag', 'INSERT IGNORE INTO flags (`name`, `type`) VALUES \r\n(''_NAME_'', ''_TYPE_'')'),
(44, 'add_change_flags', 'INSERT IGNORE INTO change_flags (_change_id, _flag_id, notes, date_entered, _entered_by) \n\n(SELECT DISTINCT ''_CHANGE_ID_'' AS _change_id, F.id AS _flag_id, ''_NOTES_'' AS notes, NOW(), ''_USER_ID_'' AS _entered_by FROM flags F WHERE F.id IN (_FLAG_IDS_)) '),
(45, 'delete_change_flag', 'DELETE FROM change_flags WHERE id=''_CHANGE_FLAG_ID_'''),
(46, 'get_descriptor_list', 'SELECT D.id AS descriptor_id, \nD.description, \n(SELECT scope_name FROM `transaction_descriptor_scopes` WHERE id=D._scope_id) AS scope, \nD.possible_location_matches AS possible_locations, \nD.affected_transaction_amount AS affected_amount, \nD.affected_transaction_number AS affected_number, \nD.status, \n(SELECT C1.`name` FROM `transaction_descriptor_sub_categories` SC2 \n	LEFT JOIN categories_level_2 C2 ON (C2.id=SC2._sub_category_id) \n	LEFT JOIN categories_level_1 C1 ON (C2._category_id=C1.id) WHERE SC2._descriptor_id=D.id AND C1.`name` IS NOT NULL LIMIT 1) AS category, \n(SELECT C.`name` FROM transactions_raw R LEFT JOIN transactions T ON (T._raw_id=R.id) \n	LEFT JOIN store_chains SC ON (SC._store_id=T._store_id) LEFT JOIN chains C ON (C.id=SC._chain_id)\n	WHERE R.payee_name = D.description AND C.`name` IS NOT NULL LIMIT 1) AS sample_chain, \n\nIF((SELECT _chain_id FROM transaction_descriptor_chains WHERE _transaction_descriptor_id=D.id ORDER BY is_selected DESC LIMIT 1) IS NOT NULL, \n	IF((SELECT id FROM transaction_descriptors_suggested_stores WHERE _transaction_descriptor_id=D.id LIMIT 1) IS NOT NULL, \n		(SELECT COUNT(DS.id) FROM transaction_descriptors_suggested_stores DS \n		LEFT JOIN transaction_descriptor_chains DC ON (DS._chain_id=DC._chain_id AND DS._transaction_descriptor_id=DC._transaction_descriptor_id AND DC.is_selected=''Y'')\n		WHERE DC._transaction_descriptor_id=D.id), 1)\n, 0) AS store_match_count, \n\n(SELECT COUNT(DISTINCT H._matched_store_id) FROM match_history_stores H \n	LEFT JOIN transactions_raw R ON (H._raw_transaction_id=R.id) WHERE R.payee_name = D.description AND H._matched_store_id IS NOT NULL) AS possible_matches, \n\nIF(''_PHRASE_'' <> '''', \nIF(D.description = ''_PHRASE_'', 1, \nIF(D.description LIKE CONCAT(''%'',''_PHRASE_'',''%''), 2,\nIF(D.description LIKE CONCAT(''_PHRASE_'',''%''), 3,\nIF(D.description LIKE CONCAT(''%'',''_PHRASE_''), 4,\nIF(D.description LIKE CONCAT(LEFT(''_PHRASE_'',LOCATE('' '',''_PHRASE_'') - 1),''%''), 5, 6\n))))), 7) AS list_order\n\n\nFROM `transaction_descriptors` D \nLEFT JOIN transactions_raw R ON (R.payee_name = D.description) \nLEFT JOIN changes CH ON (CH._transaction_descriptor_id = D.id AND CH._entered_by <> ''0'' AND CH._entered_by IS NOT NULL)\nWHERE \n(''_PHRASE_'' = '''' || (''_PHRASE_'' <> '''' AND MATCH D.description AGAINST (''_PHRASE_'')))\n _BANK_FILTER_\n _STATUS_FILTER_BEFORE_\n _ADMIN_FILTER_\nGROUP BY D.description \n _STATUS_FILTER_AFTER_\nORDER BY list_order ASC, D.affected_transaction_amount DESC \n  _LIMIT_TEXT_'),
(47, 'update_descriptor_field', 'UPDATE transaction_descriptors SET _FIELD_NAME_=''_FIELD_VALUE_'' WHERE id=''_DESCRIPTOR_ID_'''),
(48, 'get_previous_and_new_descriptor_scope', 'SELECT S1.scope_name AS previous_scope, S2.scope_name AS new_scope, D._scope_id AS previous_id, S2.id AS new_id \r\nFROM transaction_descriptors D \r\nLEFT JOIN `transaction_descriptor_scopes` S1 ON (D._scope_id=S1.id) \r\nLEFT JOIN `transaction_descriptor_scopes` S2 ON (''_NEW_SCOPE_ID_''=S2.id) \r\nWHERE D.id = ''_DESCRIPTOR_ID_'''),
(49, 'update_descriptor_scope', 'UPDATE transaction_descriptors SET _scope_id=''_SCOPE_ID_'', last_updated=NOW(), _last_updated_by=''_USER_ID_'',  \nstatus=IF((SELECT status_match FROM `transaction_descriptor_scopes` WHERE id=''_SCOPE_ID_'') <> '''', \n	(SELECT status_match FROM `transaction_descriptor_scopes` WHERE id=''_SCOPE_ID_''), \n	status) \nWHERE id=''_DESCRIPTOR_ID_'''),
(50, 'add_matching_rule_due_to_scope', 'INSERT INTO store_match_rules (rule_type, confidence, match_store_id, details, is_active, descriptor_id) \n(SELECT ''reject'' AS rule_type, ''100'' AS confidence, '''' AS match_store_id, \nCONCAT("''_PAYEE_NAME_'' LIKE ''%",D.description,"%'' OR ''_EXTENDED_PAYEE_NAME_'' LIKE ''%",D.description,"%''") AS details, \n''Y'' AS is_active, ''_DESCRIPTOR_ID_'' AS descriptor_id\nFROM transaction_descriptors D \nWHERE D.id = ''_DESCRIPTOR_ID_'' AND status=''unqualified'')\n\nON DUPLICATE KEY UPDATE confidence=VALUES(confidence), is_active=VALUES(is_active)'),
(51, 'get_descriptor_change_list', 'SELECT A.*, \nIF(A.last_admin_id=''_USER_ID_'' \n	OR (SELECT id FROM `user_security_settings` WHERE _user_id=''_USER_ID_'' AND user_type=''admin'' LIMIT 1) IS NOT NULL AND A.latest_status <> ''verified'', \n''Y'', ''N'') AS can_rollback FROM\n\n(SELECT C.id, \n(SELECT UNIX_TIMESTAMP(date_entered) FROM change_log WHERE _change_id=C.id ORDER BY date_entered DESC LIMIT 1) AS last_update, \nC.`contributors`, \nC.description, \n(SELECT COUNT(id) FROM change_flags WHERE _change_id=C.id) AS flag_count, \nIF((SELECT id FROM `user_security_settings` WHERE _user_id=''_USER_ID_'' AND user_type=''admin'' LIMIT 1) IS NOT NULL, ''Y'', ''N'') AS can_approve, \nIF((SELECT id FROM `user_security_settings` WHERE _user_id=''_USER_ID_'' AND user_type=''admin'' LIMIT 1) IS NOT NULL, ''Y'', ''N'') AS can_reject, \n(SELECT CONCAT(U.first_name, '' '', U.last_name) \n	FROM users U  \n	LEFT JOIN change_log CL ON (U.id=CL._entered_by) \n	LEFT JOIN `user_security_settings` S ON (U.id=S._user_id AND S.user_type=''admin'')\n	WHERE CL._change_id=C.id\n	ORDER BY CL.date_entered DESC LIMIT 1) AS last_admin_name, \n\n(SELECT S.user_type_level \n	FROM change_log CL\n	LEFT JOIN `user_security_settings` S ON (CL._entered_by=S._user_id AND S.user_type=''admin'')\n	WHERE CL._change_id=C.id\n	ORDER BY CL.date_entered DESC LIMIT 1) AS last_admin_level, \n\n\n(SELECT CL._entered_by \n	FROM change_log CL \n	WHERE CL._change_id=C.id\n	ORDER BY CL.date_entered DESC LIMIT 1) AS last_admin_id, \n\n(SELECT new_status FROM change_log WHERE _change_id=C.id ORDER BY date_entered DESC LIMIT 1) AS latest_status\n\nFROM changes C \nWHERE C._transaction_descriptor_id = ''_DESCRIPTOR_ID_'' AND C.description LIKE ''_PHRASE_'' \nORDER BY C.date_entered DESC \n _LIMIT_TEXT_\n) A'),
(52, 'get_category_details', 'SELECT * FROM `categories_level_1` WHERE id=''_CATEGORY_ID_'''),
(53, 'add_sub_category_suggestion', 'INSERT IGNORE INTO `categories_level_2_suggestions` (	suggestion, _categories_level_1_id, _transaction_descriptor_id, date_entered, _entered_by) VALUES \n\n(''_SUGGESTION_'', ''_CATEGORY_ID_'', ''_DESCRIPTOR_ID_'', NOW(), ''_USER_ID_'')'),
(54, 'add_descriptor_sub_category', 'INSERT IGNORE INTO `transaction_descriptor_sub_categories` (_descriptor_id, _sub_category_id) VALUES \n(''_DESCRIPTOR_ID_'', ''_SUB_CATEGORY_ID_'')'),
(55, 'get_category_level_2_suggestion_list', 'SELECT CONCAT(C2.id,''__'',C2._categories_level_1_id) AS id, C2.suggestion AS name, C2._categories_level_1_id AS level_1_id,\nIF((SELECT CS.id FROM transaction_descriptor_sub_categories_suggestions CS WHERE CS._sub_category_id=C2.id AND CS._descriptor_id=''_DESCRIPTOR_ID_'' ) IS NOT NULL, ''Y'',''N'') AS is_selected\n\n FROM `categories_level_2_suggestions` C2 WHERE C2.status = ''pending'' ORDER BY C2.suggestion'),
(56, 'get_sub_category_name_list', 'SELECT GROUP_CONCAT(cap_first_letter_in_words(name) SEPARATOR '', '') AS list FROM `categories_level_2` WHERE id IN (''_ID_LIST_'')'),
(57, 'get_suggested_sub_category_name_list', 'SELECT GROUP_CONCAT(cap_first_letter_in_words(suggestion) SEPARATOR '', '') AS list FROM `categories_level_2_suggestions` WHERE id IN (''_ID_LIST_'')'),
(58, 'remove_descriptor_categories', 'DELETE FROM transaction_descriptor_sub_categories WHERE _descriptor_id=''_DESCRIPTOR_ID_'''),
(59, 'add_descriptor_categories', 'INSERT IGNORE INTO transaction_descriptor_sub_categories (_descriptor_id, _sub_category_id )\r\n\r\n(SELECT ''_DESCRIPTOR_ID_'' AS _descriptor_id, C.id AS _sub_category_id FROM categories_level_2 C WHERE id IN (''_ID_LIST_''))'),
(60, 'add_suggested_descriptor_categories', 'INSERT INTO `transaction_descriptor_sub_categories_suggestions` (_descriptor_id, _sub_category_id, suggestion_count) \n\n(SELECT DISTINCT ''_DESCRIPTOR_ID_'' AS _descriptor_id, C.id AS _sub_category_id, ''1'' AS suggestion_count FROM categories_level_2 C \nWHERE C.id IN (''_ID_LIST_'')) \n\nON DUPLICATE KEY UPDATE suggestion_count=(suggestion_count+1)'),
(61, 'get_sample_descriptor_category', 'SELECT C1.name AS sample_category FROM transaction_descriptor_sub_categories DC \r\nLEFT JOIN categories_level_2 C2 ON (C2.id=DC._sub_category_id) \r\nLEFT JOIN categories_level_1 C1 ON (C1.id=C2._category_id) \r\nWHERE DC._descriptor_id=''_DESCRIPTOR_ID_'' LIMIT 1'),
(62, 'get_level_1_categories', 'SELECT id AS category_id, name AS category_name FROM categories_level_1 WHERE is_active=''Y'''),
(63, 'search_stores_by_fields', 'SELECT *, cap_first_letter_in_words(`address_line_1`) AS address_line_1, cap_first_letter_in_words(`name`) AS store_name, \nIF(`name` = ''_NAME_'', 1, \nIF(`name` LIKE CONCAT(''_NAME_'', ''%''), 2, \nIF(`name` LIKE CONCAT(''%'', ''_NAME_'', ''%''), 3, \n4))) AS list_order\n\nFROM stores \nWHERE MATCH(`name`) AGAINST(CONCAT(''+"'', SUBSTRING_INDEX(''_NAME_'', '' '', 1), ''"'')) \n	AND LENGTH(SUBSTRING_INDEX(''_NAME_'', '' '', 1)) > 3 \n	AND `name` LIKE CONCAT(''%'', SUBSTRING_INDEX(''_NAME_'', '' '', 1), ''%'') \n	AND `address_line_1` LIKE ''_ADDRESS_''\n\nORDER BY list_order ASC \n_LIMIT_TEXT_;'),
(64, 'add_new_store', 'INSERT IGNORE INTO `store_suggestions` (name, website, address, zipcode, store_id, date_entered, _entered_by, last_updated, _last_updated_by) VALUES \n(''_NAME_'', ''_WEBSITE_'', ''_ADDRESS_'', ''_ZIPCODE_'', ''_STORE_ID_'', NOW(), ''_USER_ID_'', NOW(), ''_USER_ID_'')'),
(65, 'add_new_store_descriptor_record', 'INSERT INTO `transaction_descriptors_suggested_stores` (_transaction_descriptor_id, suggested_store_id, store_id, _chain_id, _category_id, status, date_entered, _entered_by) VALUES \n\n(''_DESCRIPTOR_ID_'', ''_SUGGESTED_STORE_ID_'', ''_STORE_ID_'', ''_CHAIN_ID_'', ''_CATEGORY_ID_'', ''_STATUS_'', NOW(), ''_USER_ID_'')\n\nON DUPLICATE KEY UPDATE _chain_id=''_CHAIN_ID_'', _category_id=''_CATEGORY_ID_'', status=''_STATUS_'''),
(67, 'get_list_of_stores', 'SELECT S.id AS store_id, cap_first_letter_in_words(S.`name`) AS store_name, address_line_1, cap_first_letter_in_words(address_line_1) AS address, address_line_2, \ncity, state, zipcode, _country_code AS country, website, \nIF(S.`name` = ''_PHRASE_'', 1, \nIF(S.`name` LIKE CONCAT(''_PHRASE_'', ''%''), 2, \nIF(S.`name` LIKE CONCAT(''%'', ''_PHRASE_'', ''%''), 3, \nIF(''_PHRASE_'' LIKE CONCAT(''%'', S.`address_line_1`, ''%''), 4, \nIF((''_PHRASE_'' LIKE CONCAT(''%'', S.`city`, ''%'') AND S.`address_line_1` LIKE CONCAT(''%'',REPLACE('' '', ''% '', ''_PHRASE_''),''%'')), 5, \nIF(''_PHRASE_'' LIKE CONCAT(''%'', S.`city`, ''%''), 6, \n7)))))) AS list_order\nFROM stores S\nLEFT JOIN store_sub_categories C ON (C._store_id = S.id)\n\nWHERE MATCH(S.`name`) AGAINST(CONCAT(''+"'', SUBSTRING_INDEX(''_PHRASE_'', '' '', 1), ''"'')) \n	AND LENGTH(SUBSTRING_INDEX(''_PHRASE_'', '' '', 1)) > 3 \n	AND S.`name` LIKE CONCAT(''%'', SUBSTRING_INDEX(''_PHRASE_'', '' '', 1), ''%'') \n	AND ((''_ZIPCODE_'' <> '''' AND S.`zipcode` = ''_ZIPCODE_'') OR ''_ZIPCODE_'' = '''')\n	AND ((''_WEBSITE_'' <> '''' AND S.`website` LIKE CONCAT(''%'',''_WEBSITE_'',''%'')) OR ''_WEBSITE_'' = '''')\n	AND ((''_CATEGORY_IDS_'' <> '''' AND C.`_category_id` IN (''_CATEGORY_IDS_'')) OR ''_CATEGORY_IDS_'' = '''')\nGROUP BY S.id \nORDER BY list_order ASC \n_LIMIT_TEXT_;'),
(68, 'add_reference_link', 'INSERT INTO `chain_references` (details, reference_link, date_entered, _chain_id, _entered_by) VALUES \n\n(''_LINK_TEXT_'', ''_LINK_'', NOW(), ''_CHAIN_ID_'', ''_USER_ID_'')'),
(69, 'get_chain_links', 'SELECT id AS link_id, details AS link_text, reference_link AS link FROM chain_references WHERE _chain_id=''_CHAIN_ID_'''),
(70, 'get_chains_for_suggested', 'SELECT C.id AS chain_id, C.name AS chain_name, C.is_live, \nIF(''_STORE_ID_'' <> '''' AND (SELECT id FROM store_suggestions WHERE id=''_STORE_ID_'' AND chain_id=C.id LIMIT 1) IS NOT NULL, ''Y'',''N'') AS is_selected \nFROM `chains` C \nWHERE C.name LIKE ''%_PHRASE_%'' \n\nORDER BY is_selected DESC, C.is_live DESC  \n_LIMIT_TEXT_'),
(71, 'get_chains_for_store', 'SELECT C.id AS chain_id, C.name AS chain_name, C.is_live, \nIF(''_STORE_ID_'' <> '''' AND \n((SELECT S.id FROM store_chains S WHERE S._store_id=''_STORE_ID_'' AND S._chain_id=C.id LIMIT 1) IS NOT NULL\nOR (SELECT S.id FROM store_suggestions S WHERE S.store_id=''_STORE_ID_'' AND chain_id=C.id LIMIT 1) IS NOT NULL), ''Y'',''N'') AS is_selected \nFROM `chains` C \nWHERE C.name LIKE ''%_PHRASE_%'' \n\nORDER BY is_selected DESC, C.is_live DESC  \n_LIMIT_TEXT_'),
(72, 'get_chain_by_id', 'SELECT * FROM chains WHERE id=''_CHAIN_ID_'''),
(73, 'update_chain_field', 'UPDATE chains SET _FIELD_NAME_=''_FIELD_VALUE_'' WHERE id=''_CHAIN_ID_'''),
(74, 'add_new_chain', 'INSERT IGNORE INTO chains (name, is_live, date_entered, _entered_by) VALUES \n\n(''_CHAIN_NAME_'', ''Y'', NOW(), ''_USER_ID_'')'),
(75, 'link_store_to_chain', 'INSERT IGNORE INTO store_chains (	_chain_id, _store_id, date_entered, _entered_by) VALUES \n\n(''_CHAIN_ID_'', ''_STORE_ID_'', NOW(), ''_USER_ID_'')'),
(76, 'link_suggested_to_chain', 'UPDATE store_suggestions SET chain_id=''_CHAIN_ID_'', last_updated=NOW(), _last_updated_by=''_USER_ID_'' WHERE id=''_STORE_ID_'''),
(77, 'get_edit_chain_details_by_id', 'SELECT C.id AS chain_id, C.name AS chain_name, C.address_line_1 AS address, C.zipcode, C.website, CAT._category_id AS category_id, (SELECT name FROM categories_level_1 WHERE id=CAT._category_id LIMIT 1) AS category FROM chains C LEFT JOIN chain_categories CAT ON (C.id=CAT._chain_id) WHERE C.id=''_CHAIN_ID_'' LIMIT 1'),
(78, 'get_edit_suggested_details_by_id', 'SELECT id AS store_id, `name` AS store_name,  address,\nchain_id,\n(SELECT C.name FROM chains C WHERE C.id=chain_id AND chain_id <> ''0'' LIMIT 1) AS chain_name,  \n(SELECT _category_id FROM transaction_descriptors_suggested_stores WHERE _suggested_store_id=S.id LIMIT 1) AS store_category, \nzipcode, country, website, store_id AS actual_store_id \nFROM store_suggestions S WHERE id=''_STORE_ID_'''),
(79, 'update_store_details', 'UPDATE stores SET name=''_NAME_'', address_line_1=''_ADDRESS_'', website=''_WEBSITE_'', zipcode=''_ZIPCODE_'', last_updated=NOW(), _last_updated_by=''_USER_ID_'' WHERE id=''_STORE_ID_'''),
(80, 'get_suggested_by_store_id', 'SELECT * FROM store_suggestions WHERE store_id=''_STORE_ID_'''),
(81, 'remove_reference_links', 'DELETE FROM chain_references WHERE _chain_id=''_CHAIN_ID_'''),
(82, 'update_suggested_details', 'UPDATE store_suggestions SET name=''_NAME_'', website=''_WEBSITE_'', address=''_ADDRESS_'', zipcode=''_ZIPCODE_'' WHERE id=''_STORE_ID_'''),
(83, 'get_descriptor_location_ids', 'SELECT DISTINCT _suggested_store_id AS location_id FROM transaction_descriptors_suggested_stores WHERE _transaction_descriptor_id=''_DESCRIPTOR_ID_'''),
(84, 'remove_descriptor_attachment', 'DELETE FROM transaction_descriptors_suggested_stores WHERE _transaction_descriptor_id=''_DESCRIPTOR_ID_'' AND _suggested_store_id IN (''_STORE_IDS_'')'),
(85, 'get_descriptor_real_store_ids', 'SELECT DISTINCT store_id FROM transaction_descriptors_suggested_stores WHERE store_id <> ''0'' AND _transaction_descriptor_id=''_DESCRIPTOR_ID_'''),
(86, 'add_matching_rule_due_to_location', 'INSERT INTO store_match_rules (rule_type, confidence, match_store_id, details, is_active, descriptor_id) \n(SELECT ''match'' AS rule_type, ''100'' AS confidence, ''_STORE_ID_'' AS match_store_id, \nCONCAT("''_PAYEE_NAME_'' LIKE ''%",D.description,"%'' OR ''_EXTENDED_PAYEE_NAME_'' LIKE ''%",D.description,"%''") AS details, \n''Y'' AS is_active, ''_DESCRIPTOR_ID_'' AS descriptor_id\nFROM transaction_descriptors D \nWHERE D.id = ''_DESCRIPTOR_ID_'')\n\nON DUPLICATE KEY UPDATE confidence=VALUES(confidence), is_active=VALUES(is_active)'),
(87, 'get_store_chain_names', 'SELECT DISTINCT C.name AS chain_name \r\nFROM store_suggestions S \r\nLEFT JOIN chains C ON (S.chain_id=C.id AND S.chain_id <> ''0'') \r\nWHERE C.name IS NOT NULL AND S.id IN (SELECT _suggested_store_id FROM transaction_descriptors_suggested_stores WHERE _transaction_descriptor_id=''_DESCRIPTOR_ID_'')'),
(88, 'remove_matching_rules_due_to_location', 'DELETE FROM store_match_rules WHERE rule_type=''match'' AND descriptor_id=''_DESCRIPTOR_ID_'' AND match_store_id <> '''''),
(89, 'add_matching_rule_due_to_chain', 'INSERT INTO chain_match_rules (rule_type, confidence, match_chain_id, details, is_active, descriptor_id) \n(SELECT ''match'' AS rule_type, ''100'' AS confidence, C.id AS match_chain_id, \nCONCAT("''_PAYEE_NAME_'' LIKE ''%",D.description,"%'' OR ''_EXTENDED_PAYEE_NAME_'' LIKE ''%",D.description,"%''") AS details, \n''Y'' AS is_active, ''_DESCRIPTOR_ID_'' AS descriptor_id\nFROM transaction_descriptors D LEFT JOIN chains C ON (C.name=''_CHAIN_NAME_'')\nWHERE D.id = ''_DESCRIPTOR_ID_'')\n\nON DUPLICATE KEY UPDATE confidence=VALUES(confidence), is_active=VALUES(is_active)'),
(90, 'remove_matching_rules_due_to_chain', 'DELETE FROM `chain_match_rules` WHERE descriptor_id=''_DESCRIPTOR_ID_'' AND rule_type=''match'''),
(91, 'get_matching_rules', 'SELECT * FROM (\n(SELECT A.*, \nIF(LEFT(A.search_string, 1) = ''%'' AND RIGHT(A.search_string, 1) = ''%'', ''contains'', \nIF(LEFT(A.search_string, 1) = ''%'', ''ending_with'', \nIF(RIGHT(A.search_string, 1) = ''%'', ''starting_with'', ''equal_to''))) AS search_criteria,\nTRIM(BOTH ''%'' FROM A.search_string) AS search_string_clean, \nIF(A.match_id IS NOT NULL AND A.match_id <> ''0'', `cap_first_letter_in_words`((SELECT CONCAT(S.`name`, '' | '', S.address_line_1, '' '', S.zipcode) FROM stores S WHERE id=A.match_id LIMIT 1)), '''') AS target_name\n \nFROM \n(SELECT id, rule_type AS rule_action, match_store_id AS match_id, descriptor_id, \nSUBSTRING_INDEX(SUBSTRING_INDEX(details, "''_PAYEE_NAME_'' LIKE ''", -1), "'' OR ''_EXTENDED_PAYEE_NAME_'' LIKE ''", 1) AS search_string,\nis_active, ''store'' AS rule_category\nFROM store_match_rules) A\n\nWHERE descriptor_id=''_DESCRIPTOR_ID_'' AND ''store'' IN (''_TYPES_'')\nORDER BY rule_action \n _LIMIT_TEXT_\n)\n\nUNION \n\n(SELECT A.*, \nIF(LEFT(A.search_string, 1) = ''%'' AND RIGHT(A.search_string, 1) = ''%'', ''contains'', \nIF(LEFT(A.search_string, 1) = ''%'', ''ending_with'', \nIF(RIGHT(A.search_string, 1) = ''%'', ''starting_with'', ''equal_to''))) AS search_criteria,\nTRIM(BOTH ''%'' FROM A.search_string) AS search_string_clean, \n(SELECT C.`name` FROM chains C WHERE C.id=A.match_id LIMIT 1) AS target_name\n\nFROM \n(SELECT id, rule_type AS rule_action, match_chain_id AS match_id, descriptor_id, \nSUBSTRING_INDEX(SUBSTRING_INDEX(details, "''_PAYEE_NAME_'' LIKE ''", -1), "'' OR ''_EXTENDED_PAYEE_NAME_'' LIKE ''", 1) AS search_string,\nis_active, ''chain'' AS rule_category\nFROM chain_match_rules) A\n\nWHERE descriptor_id=''_DESCRIPTOR_ID_'' AND ''chain'' IN (''_TYPES_'') \nORDER BY rule_action \n _LIMIT_TEXT_\n)) B WHERE B.search_string_clean LIKE ''_PHRASE_''\n_LIMIT_TEXT_'),
(92, 'add_matching_rule', 'INSERT IGNORE INTO _CATEGORY__match_rules (rule_type, confidence, match__CATEGORY__id, descriptor_id, details, is_active) VALUES \r\n(''_RULE_TYPE_'', ''_CONFIDENCE_'', ''_MATCH_ID_'', ''_DESCRIPTOR_ID_'', ''_DETAILS_'', ''_IS_ACTIVE_'')'),
(93, 'remove_match_rule', 'DELETE FROM _CATEGORY__match_rules WHERE id=''_RULE_ID_'''),
(94, 'get_content_list', 'SELECT * FROM list_actions WHERE list_type=''_LIST_TYPE_'' AND content_type=''_CONTENT_TYPE_'''),
(95, 'get_user_details_list', 'SELECT _FIELDS_ FROM view__user_details WHERE 1=1 _PHRASE_CONDITION_ _TYPE_CONDITION_ \n_LIMIT_TEXT_'),
(96, 'get_permission_group_list', 'SELECT G.id AS group_id,\nG.name AS group_name, \n\n(SELECT CONCAT_WS("",\n\n"PERMISSIONS: ", (SELECT GROUP_CONCAT(DISTINCT CONCAT(P.category, '' ('',\n	(SELECT COUNT(_permission_id) FROM clout_v1_3iam.permission_group_mapping_permissions PM1 \n		LEFT JOIN clout_v1_3iam.permissions P1 ON (PM1._permission_id=P1.id) WHERE PM1._group_id=PM._group_id AND P1.category=P.category),\n	'' permissions)'') SEPARATOR '', '')\nFROM clout_v1_3iam.permission_group_mapping_permissions PM LEFT JOIN clout_v1_3iam.permissions P ON (PM._permission_id=P.id)\nWHERE PM._group_id=G.id), \n\n"  RULES: ",(SELECT GROUP_CONCAT(DISTINCT CONCAT(R.category, '' ('',\n	(SELECT COUNT(_rule_id) FROM clout_v1_3iam.permission_group_mapping_rules RM1 \n		LEFT JOIN clout_v1_3iam.rules R1 ON (RM1._rule_id=R1.id) WHERE RM1._group_id=RM._group_id AND R1.category=R.category),\n	'' rules)'') SEPARATOR '', '')\nFROM clout_v1_3iam.permission_group_mapping_rules RM LEFT JOIN clout_v1_3iam.rules R ON (RM._rule_id=R.id)\nWHERE RM._group_id=G.id)\n\n)) AS permission_summary, \n\n(SELECT COUNT(DISTINCT user_id) FROM clout_v1_3iam.user_access WHERE permission_group_id=G.id) AS user_count, \n\nG.`status`\nFROM clout_v1_3iam.permission_groups G\nWHERE 1=1 _PHRASE_CONDITION_ _TYPE_CONDITION_ \n_LIMIT_TEXT_\n'),
(97, 'get_permission_list', 'SELECT P.id AS permission_id, P.code, P.display AS name, P.details AS description, P.category, P.url, P.status FROM clout_v1_3iam.permissions P \nWHERE 1=1 _PHRASE_CONDITION_ \n_LIMIT_TEXT_ '),
(98, 'get_rule_category_list', 'SELECT * FROM (\nSELECT DISTINCT category, cap_first_letter_in_words(REPLACE(category, ''_'', '' '')) AS category_display FROM clout_v1_3iam.rules) A WHERE 1=1 _PHRASE_CONDITION_ _LIMIT_TEXT_'),
(99, 'get_rule_name_list', 'SELECT id, code, display AS name, category, cap_first_letter_in_words(REPLACE(category, ''_'', '' '')) AS category_display, status FROM clout_v1_3iam.rules WHERE 1=1 _CATEGORY_CONDITION_ _PHRASE_CONDITION_ _LIMIT_TEXT_'),
(100, 'get_group_by_id', 'SELECT id, name, group_type, is_removable FROM clout_v1_3iam.`permission_groups` WHERE id=''_GROUP_ID_'''),
(101, 'get_group_rules', 'SELECT R.id, R.code, R.display AS name, R.category, cap_first_letter_in_words(REPLACE(R.category, ''_'', '' '')) AS category_display, R.status FROM clout_v1_3iam.permission_group_mapping_rules M LEFT JOIN clout_v1_3iam.rules R ON (M._rule_id=R.id) WHERE M._group_id=''_GROUP_ID_'''),
(102, 'get_group_permissions', 'SELECT P.id AS permission_id, P.code, P.display AS name, P.details AS description, P.category, P.url, P.status FROM \r\nclout_v1_3iam.permission_group_mapping_permissions M \r\nLEFT JOIN clout_v1_3iam.permissions P ON (M._permission_id=P.id)\r\nWHERE M._group_id=''_GROUP_ID_'''),
(103, 'add_permission_group', 'INSERT IGNORE INTO clout_v1_3iam.permission_groups (name, notes, group_type, is_removable, status, date_entered, entered_by, last_updated, last_updated_by) VALUES \r\n\r\n(''_NAME_'', ''_NAME_'', ''_GROUP_TYPE_'', ''_IS_REMOVABLE_'', ''_STATUS_'', NOW(), ''_USER_ID_'', NOW(), ''_USER_ID_'')'),
(104, 'update_permission_group', 'UPDATE clout_v1_3iam.permission_groups SET name=''_NAME_'', last_updated_by=''_USER_ID_'', last_updated=NOW() WHERE id=''_GROUP_ID_'''),
(105, 'delete_group_permissions', 'DELETE FROM clout_v1_3iam.`permission_group_mapping_permissions` WHERE _group_id=''_GROUP_ID_'''),
(106, 'add_group_permissions', 'INSERT IGNORE INTO clout_v1_3iam.`permission_group_mapping_permissions` (_group_id, _permission_id, entered_by, date_entered) \r\n\r\n(SELECT ''_GROUP_ID_'' AS _group_id, P.id AS _permission_id, ''_USER_ID_'' AS entered_by, NOW() AS date_entered FROM clout_v1_3iam.permissions P WHERE P.id IN (''_PERMISSION_IDS_''))'),
(107, 'delete_group_rules', 'DELETE FROM clout_v1_3iam.`permission_group_mapping_rules` WHERE _group_id=''_GROUP_ID_'''),
(108, 'add_group_rules', 'INSERT IGNORE INTO clout_v1_3iam.`permission_group_mapping_rules` (_group_id, _rule_id, entered_by, date_entered) \r\n\r\n(SELECT ''_GROUP_ID_'' AS _group_id, R.id AS _rule_id, ''_USER_ID_'' AS entered_by, NOW() AS date_entered FROM clout_v1_3iam.rules R WHERE R.id IN (''_RULE_IDS_''))'),
(109, 'update_permission_group_status', 'UPDATE clout_v1_3iam.`permission_groups` SET status=''_STATUS_'', last_updated_by=''_USER_ID_'', last_updated=NOW() WHERE id=''_GROUP_ID_'''),
(110, 'get_cron_job_list', 'SELECT S.id, S.job_type, S.activity_code, cap_first_letter_in_words(REPLACE(S.activity_code, ''_'', '' '')) AS cron_display, S.cron_value AS cron_details, UNIX_TIMESTAMP(L.event_time) AS start_time, UNIX_TIMESTAMP(S.run_time) AS end_time, S.last_result AS result, L.record_count AS total_records, S.repeat_code, S.is_done\nFROM cron_schedule S \nLEFT JOIN cron_log L ON (S.id=L._cron_job_id)\nWHERE 1=1 _PHRASE_CONDITION_ \nGROUP BY S.id \nORDER BY L.event_time DESC \n_LIMIT_TEXT_'),
(111, 'update_cron_job_status', 'UPDATE cron_schedule SET is_done=''_IS_DONE_'' WHERE id=''_JOB_ID_'''),
(112, 'get_score_settings_list', 'SELECT id,  cap_first_letter_in_words(REPLACE(code, ''_'', '' '')) AS name, description, code, UPPER(REPLACE(criteria, ''_'', '' '')) AS criteria, low_range AS min_score, high_range AS max_score\nFROM score_criteria C \nWHERE 1=1 _PHRASE_CONDITION_ _LIMIT_TEXT_'),
(113, 'update_score_value', 'UPDATE `score_criteria` SET _SCORE_FIELD_=''_SCORE_VALUE_'' WHERE id=''_SETTING_ID_'''),
(114, 'get_rule_settings_list', 'SELECT R.id AS rule_id, R.code, R.display AS name, R.details AS description, R.category,  R.status, \n\n(SELECT COUNT(DISTINCT UA.user_id) FROM clout_v1_3iam.permission_group_mapping_rules MR \nLEFT JOIN clout_v1_3iam.user_access UA ON (MR._group_id=UA.permission_group_id)\nWHERE MR._rule_id=R.id) AS user_count, \n\n(SELECT cap_first_letter_in_words(REPLACE(GROUP_CONCAT(DISTINCT group_type SEPARATOR '', ''), ''_'', '' '')) FROM clout_v1_3iam.permission_group_mapping_rules MR \nLEFT JOIN clout_v1_3iam.permission_groups G ON (MR._group_id=G.id)\nWHERE MR._rule_id=R.id) AS user_type \n\nFROM clout_v1_3iam.rules R \nWHERE 1=1 _PHRASE_CONDITION_ _LIMIT_TEXT_ '),
(115, 'update_rule_setting_status', 'UPDATE clout_v1_3iam.rules SET status=''_STATUS_'' WHERE id=''_RULE_ID_'''),
(116, 'get_rule_setting', 'SELECT * FROM clout_v1_3iam.rules WHERE id=''_RULE_ID_'''),
(117, 'update_setting_value', 'UPDATE clout_v1_3iam.rules SET details=REPLACE(details, ''_PREVIOUS_VALUE_STRING_'', ''_NEW_VALUE_STRING_'') WHERE id=''_SETTING_ID_'''),
(118, 'add_sub_category', 'INSERT IGNORE INTO `categories_level_2` (name, _category_id, is_active) \nVALUES (''_NAME_'', ''_CATEGORY_ID_'', ''Y'')'),
(119, 'get_chain_match_attempts_by_descriptor', 'SELECT A.* FROM \n((SELECT _chain_id AS id, C.name, \n(SELECT CAT.name FROM categories_level_1 CAT LEFT JOIN chain_categories CC ON (CC._category_id=CAT.id) WHERE CC._chain_id=DC._chain_id LIMIT 1) AS category, \nC.website, ''Y'' AS is_selected\nFROM `transaction_descriptor_chains` DC \nLEFT JOIN chains C ON (DC._chain_id=C.id) \nWHERE DC._transaction_descriptor_id = ''_DESCRIPTOR_ID_'')\n\nUNION \n\n(SELECT MC._matched_chain_id AS id, C.name, \n(SELECT CAT.name FROM categories_level_1 CAT LEFT JOIN chain_categories CC ON (CC._category_id=CAT.id) WHERE CC._chain_id=MC._matched_chain_id LIMIT 1) AS category, \nC.website, ''N'' AS is_selected \nFROM match_history_chains MC\nLEFT JOIN chains C ON (MC._matched_chain_id=C.id) \nWHERE MC._raw_transaction_id IN (SELECT _transactions_raw_id FROM `transaction_descriptor_transactions` WHERE _descriptor_id=''_DESCRIPTOR_ID_''))\n) A \n_LIMIT_TEXT_'),
(120, 'get_store_match_attempts_by_descriptor', 'SELECT A.* FROM (\n(SELECT DS.store_id AS id, \n(SELECT cap_first_letter_in_words(CONCAT(address_line_1, '' '', address_line_2)) FROM stores WHERE id=DS.store_id LIMIT 1) AS address, \n(SELECT zipcode FROM stores WHERE id=DS.store_id LIMIT 1) AS zipcode, DS.is_selected \nFROM transaction_descriptors_suggested_stores DS \nWHERE DS.store_id != ''0'' AND DS._transaction_descriptor_id=''_DESCRIPTOR_ID_'' AND DS._chain_id = ''_CHAIN_ID_'')\n\nUNION\n\n(SELECT MC._matched_store_id AS id, \n(SELECT cap_first_letter_in_words(CONCAT(address_line_1, '' '', address_line_2)) FROM stores WHERE id=MC._matched_store_id LIMIT 1) AS address, \n(SELECT zipcode FROM stores WHERE id=MC._matched_store_id LIMIT 1) AS zipcode,\n ''N'' AS is_selected \nFROM match_history_stores MC\nWHERE MC._raw_transaction_id IN (SELECT _transactions_raw_id FROM `transaction_descriptor_transactions` WHERE _descriptor_id=''_DESCRIPTOR_ID_'') \nAND MC._matched_store_id IN (SELECT _store_id FROM store_chains WHERE _chain_id=''_CHAIN_ID_''))\n) A\n\n _LIMIT_TEXT_'),
(121, 'add_basic_store', 'INSERT IGNORE INTO stores (name, status, address_line_1, website, date_entered, _entered_by, last_updated, _last_updated_by) VALUES \n\n(''_NAME_'', ''_STATUS_'', ''_ADDRESS_LINE_1_'', ''_WEBSITE_'', NOW(), ''_USER_ID_'', NOW(), ''_USER_ID_'')'),
(122, 'add_chain_to_descriptor', 'INSERT IGNORE INTO transaction_descriptor_chains (_transaction_descriptor_id, _chain_id, status, date_entered, _entered_by) VALUES (''_DESCRIPTOR_ID_'', ''_CHAIN_ID_'', ''_STATUS_'', NOW(), ''_USER_ID_'')'),
(123, 'add_chain_categories', 'INSERT IGNORE INTO chain_categories (_chain_id, _category_id) \n\n(SELECT ''_CHAIN_ID_'' AS _chain_id, id AS _category_id FROM categories_level_1 WHERE id IN (''_CATEGORY_IDS_''))'),
(124, 'remove_chain_categories', 'DELETE FROM `chain_categories` WHERE _chain_id=''_CHAIN_ID_'''),
(125, 'mark_store_as_selected', 'UPDATE transaction_descriptors_suggested_stores \nSET is_selected=(SELECT IF(store_id=''_STORE_ID_'', ''Y'', ''N'')) \nWHERE _chain_id=''_CHAIN_ID_'''),
(126, 'update_chain_parts', 'UPDATE chains SET _UPDATE_STRING_ WHERE id=''_CHAIN_ID_'''),
(127, 'get_edit_store_details_by_id', 'SELECT id AS store_id, address_line_1 AS address, zipcode FROM stores WHERE id=''_STORE_ID_'''),
(128, 'update_store_parts', 'UPDATE stores SET _UPDATE_STRING_ WHERE id=''_STORE_ID_'''),
(129, 'get_store_chain_details', 'SELECT (SELECT name FROM stores WHERE id=''_STORE_ID_'') AS store_name, (SELECT name FROM chains WHERE id=''_CHAIN_ID_'') AS chain_name, (SELECT COUNT(DISTINCT _store_id) FROM store_chains WHERE _chain_id=''_CHAIN_ID_'') AS location_count'),
(130, 'remove_chains_from_descriptor', 'DELETE FROM transaction_descriptor_chains WHERE _transaction_descriptor_id=''_DESCRIPTOR_ID_'''),
(131, 'mark_chain_as_selected', 'UPDATE `transaction_descriptor_chains` \r\nSET is_selected=(SELECT IF(_chain_id=''_CHAIN_ID_'', ''Y'', ''N'')) \r\nWHERE _transaction_descriptor_id=''_DESCRIPTOR_ID_'''),
(132, 'add_new_user', 'INSERT IGNORE INTO users (first_name, last_name, email_address, email_verified, telephone, gender, zipcode, birthday, date_entered) VALUES \n\n(''_FIRST_NAME_'', ''_LAST_NAME_'', ''_EMAIL_ADDRESS_'', ''_EMAIL_VERIFIED_'', ''_TELEPHONE_'', ''_GENDER_'', ''_ZIPCODE_'', ''_BIRTHDAY_'', NOW())'),
(133, 'add_user_contact', 'INSERT IGNORE INTO contact_phones (_user_id, _provider_id, telephone)  \n(SELECT ''_USER_ID_'' AS _user_id, P.id AS _provider_id, ''_TELEPHONE_'' AS telephone FROM contact_phone_providers P WHERE P.full_carrier_name=''_PROVIDER_'')'),
(134, 'update_user_field', 'UPDATE users SET _FIELD_NAME_=''_FIELD_VALUE_'', last_updated=NOW(), _last_updated_by=''_USER_ID_'' WHERE id=''_USER_ID_'''),
(135, 'add_message_settings', 'INSERT INTO user_preferred_communication (_user_id, 	message_format, message_type)\n(SELECT ''_USER_ID_'' AS _user_id, M.word AS message_format, ''_MESSAGE_TYPES_'' AS message_type FROM\n \n(SELECT IF(''email'' IN (_MESSAGE_FORMATS_), ''email'','''') AS word \nUNION SELECT IF(''sms'' IN (_MESSAGE_FORMATS_), ''sms'','''') AS word \nUNION SELECT IF(''system'' IN (_MESSAGE_FORMATS_), ''system'','''') AS word) M \n\nWHERE M.word <> '''')\n\nON DUPLICATE KEY UPDATE message_type=VALUES(message_type);'),
(136, 'get_bank_details', 'SELECT _FIELD_LIST_ FROM banks WHERE id=''_BANK_ID_'''),
(137, 'get_user_banks', 'SELECT DISTINCT B.institution_name AS bank_name, B.id AS bank_id, SUBSTRING_INDEX(B.home_url, ''/'', 3) AS website, B.logo_url, B.phone_number AS telephone \nFROM bank_accounts UB \nLEFT JOIN banks B ON (UB._bank_id=B.id) \nWHERE UB._user_id=''_USER_ID_'''),
(138, 'add_access_token', 'INSERT INTO plaid_access_token (_user_id, _bank_id, bank_code, user_email, access_token, third_party_user_name, third_party_user_password, is_active, date_entered) \n\nVALUES (''_USER_ID_'', ''_BANK_ID_'', ''_BANK_CODE_'', ''_USER_EMAIL_'', ''_ACCESS_TOKEN_'', ''_USER_NAME_'', ''_USER_PASSWORD_'', ''Y'', NOW()) \n\nON DUPLICATE KEY UPDATE is_active=''N'';'),
(139, 'get_access_token', 'SELECT access_token, third_party_user_name AS user_name, third_party_user_password AS user_password FROM plaid_access_token WHERE user_email=''_USER_EMAIL_'' AND bank_code=''_BANK_CODE_'' AND is_active=''Y'' LIMIT 1'),
(140, 'add_to_cron_schedule', 'INSERT INTO cron_schedule (job_type, activity_code, cron_value, is_done, last_result, repeat_code) \n\nVALUES (''_JOB_TYPE_'', ''_ACTIVITY_CODE_'', ''_CRON_VALUE_'', ''N'', ''none'', ''_REPEAT_CODE_'')'),
(142, 'update_cron_schedule_field', 'UPDATE cron_schedule SET _FIELD_NAME_=''_FIELD_VALUE_'' WHERE id=''_ID_'''),
(143, 'add_cron_log', 'INSERT INTO cron_log (_cron_job_id, user_id, job_type, activity_code, result, uri, log_details, record_count, ip_address, event_time) VALUES \r\n(''_JOB_ID_'', ''_USER_ID_'', ''_JOB_TYPE_'', ''_ACTIVITY_CODE_'', ''_RESULT_'', ''_URI_'', ''_LOG_DETAILS_'', ''_RECORD_COUNT_'', ''_IP_ADDRESS_'', NOW())'),
(144, 'get_user_by_email', 'SELECT id AS user_id, first_name, last_name FROM users \nWHERE email_address=''_EMAIL_ADDRESS_'''),
(145, 'remove_clout_transactions_by_api_ids', 'DELETE FROM transactions WHERE _raw_id IN (SELECT id FROM transactions_raw WHERE transaction_id IN (_API_IDS_))'),
(146, 'remove_raw_transactions_by_api_ids', 'DELETE FROM transactions_raw WHERE transaction_id IN (_API_IDS_)'),
(147, 'disable_plaid_access_token', 'UPDATE plaid_access_token SET is_active=''N'' WHERE access_token=''_ACCESS_TOKEN_'''),
(148, 'update_cron_schedule_field', 'UPDATE cron_schedule SET _FIELD_NAME_=''_FIELD_VALUE_'' WHERE id=''_ID_'''),
(149, 'get_last_transaction_date', 'SELECT MAX(posted_date) AS last_transaction_date, MIN(posted_date) AS earliest_transaction_date FROM transactions_raw WHERE _user_id=''_USER_ID_'' AND _bank_id=''_BANK_ID_'''),
(150, 'get_raw_account', 'SELECT * FROM _RAW_TABLE_NAME_ WHERE account_id=''_ACCOUNT_ID_'' AND _user_id=''_USER_ID_'' AND _institution_id=''_INSTITUTION_ID_'''),
(151, 'update_raw_bank_account', 'UPDATE bank_accounts_other_raw \r\n\r\nSET status=''_STATUS_'', account_nickname=''_ACCOUNT_NICKNAME_'', display_position=''_DISPLAY_POSITION_'', description=''_DESCRIPTION_'', registered_user_name=''_REGISTERED_USER_NAME_'', balance_amount=''_BALANCE_AMOUNT_'', balance_date=''_BALANCE_DATE_'', balance_previous_amount=''_BALANCE_PREVIOUS_AMOUNT_'', last_transaction_date=''_LAST_TRANSACTION_DATE_'', aggr_success_date=''_AGGR_SUCCESS_DATE_'', aggr_attempt_date=''_AGGR_ATTEMPT_DATE_'', aggr_status_code=''_AGGR_STATUS_CODE_'', currency_code=''_CURRENCY_CODE_'', bank_id=''_BANK_ID_'', institution_login_id=''_INSTITUTION_LOGIN_ID_'', banking_account_type=''_BANKING_ACCOUNT_TYPE_'', posted_date=''_POSTED_DATE_'', available_balance_amount=''_AVAILABLE_BALANCE_AMOUNT_'', interest_type=''_INTEREST_TYPE_'', origination_date=''_ORIGINATION_DATE_'', open_date=''_OPEN_DATE_'', period_interest_rate=''_PERIOD_INTEREST_RATE_'', period_deposit_amount=''_PERIOD_DEPOSIT_AMOUNT_'', period_interest_amount=''_PERIOD_INTEREST_AMOUNT_'', interest_amount_ytd=''_INTEREST_AMOUNT_YTD_'', interest_prior_amount_ytd=''_INTEREST_PRIOR_AMOUNT_YTD_'', maturity_date=''_MATURITY_DATE_'', maturity_amount=''_MATURITY_AMOUNT_'', last_updated=NOW()\r\n\r\nWHERE account_id=''_ACCOUNT_ID_'' AND _user_id=''_USER_ID_'' AND _institution_id=''_INSTITUTION_ID_'''),
(152, 'save_raw_bank_account', 'INSERT INTO bank_accounts_other_raw (\naccount_id, _user_id, status, account_number, account_number_real, account_nickname, display_position, _institution_id, description, registered_user_name, balance_amount, balance_date, balance_previous_amount, last_transaction_date, aggr_success_date, aggr_attempt_date, aggr_status_code, currency_code, bank_id, institution_login_id, banking_account_type, posted_date, available_balance_amount, interest_type, origination_date, open_date, period_interest_rate, period_deposit_amount, period_interest_amount, interest_amount_ytd, interest_prior_amount_ytd, maturity_date, maturity_amount, last_updated\n) VALUES \n(\n''_ACCOUNT_ID_'', ''_USER_ID_'', ''_STATUS_'', ''_ACCOUNT_NUMBER_'', ''_ACCOUNT_NUMBER_REAL_'', ''_ACCOUNT_NICKNAME_'', ''_DISPLAY_POSITION_'', ''_INSTITUTION_ID_'', ''_DESCRIPTION_'', ''_REGISTERED_USER_NAME_'', ''_BALANCE_AMOUNT_'', ''_BALANCE_DATE_'', ''_BALANCE_PREVIOUS_AMOUNT_'', ''_LAST_TRANSACTION_DATE_'', ''_AGGR_SUCCESS_DATE_'', ''_AGGR_ATTEMPT_DATE_'', ''_AGGR_STATUS_CODE_'', ''_CURRENCY_CODE_'', ''_BANK_ID_'', ''_INSTITUTION_LOGIN_ID_'', ''_BANKING_ACCOUNT_TYPE_'', ''_POSTED_DATE_'', ''_AVAILABLE_BALANCE_AMOUNT_'', ''_INTEREST_TYPE_'', ''_ORIGINATION_DATE_'', ''_OPEN_DATE_'', ''_PERIOD_INTEREST_RATE_'', ''_PERIOD_DEPOSIT_AMOUNT_'', ''_PERIOD_INTEREST_AMOUNT_'', ''_INTEREST_AMOUNT_YTD_'', ''_INTEREST_PRIOR_AMOUNT_YTD_'', ''_MATURITY_DATE_'', ''_MATURITY_AMOUNT_'', NOW()\n)');
INSERT INTO queries (id, code, details) VALUES
(153, 'update_raw_credit_account', 'UPDATE bank_accounts_credit_raw \r\n\r\nSET status=''_STATUS_'', account_nickname=''_ACCOUNT_NICKNAME_'', display_position=''_DISPLAY_POSITION_'', description=''_DESCRIPTION_'', registered_user_name=''_REGISTERED_USER_NAME_'', balance_amount=''_BALANCE_AMOUNT_'', balance_date=''_BALANCE_DATE_'', balance_previous_amount=''_BALANCE_PREVIOUS_AMOUNT_'', last_transaction_date=''_LAST_TRANSACTION_DATE_'', aggr_success_date=''_AGGR_SUCCESS_DATE_'', aggr_attempt_date=''_AGGR_ATTEMPT_DATE_'', aggr_status_code=''_AGGR_STATUS_CODE_'', currency_code=''_CURRENCY_CODE_'', bank_id=''_BANK_ID_'', institution_login_id=''_INSTITUTION_LOGIN_ID_'', credit_account_type=''_CREDIT_ACCOUNT_TYPE_'', detailed_description=''_DETAILED_DESCRIPTION_'', interest_rate=''_INTEREST_RATE_'', credit_available_amount=''_CREDIT_AVAILABLE_AMOUNT_'', credit_max_amount=''_CREDIT_MAX_AMOUNT_'', cash_advance_available_amount=''_CASH_ADVANCE_AVAILABLE_AMOUNT_'', cash_advance_max_amount=''_CASH_ADVANCE_MAX_AMOUNT_'', cash_advance_balance=''_CASH_ADVANCE_BALANCE_'', cash_advance_interest_rate=''_CASH_ADVANCE_INTEREST_RATE_'', current_balance=''_CURRENT_BALANCE_'', payment_min_amount=''_PAYMENT_MIN_AMOUNT_'', payment_due_date=''_PAYMENT_DUE_DATE_'', previous_balance=''_PREVIOUS_BALANCE_'', statement_end_date=''_STATEMENT_END_DATE_'', statement_purchase_amount=''_STATEMENT_PURCHASE_AMOUNT_'', statement_finance_amount=''_STATEMENT_FINANCE_AMOUNT_'', past_due_amount=''_PAST_DUE_AMOUNT_'', last_payment_amount=''_LAST_PAYMENT_AMOUNT_'', last_payment_date=''_LAST_PAYMENT_DATE_'', statement_close_balance=''_STATEMENT_CLOSE_BALANCE_'', statement_late_fee_amount=''_STATEMENT_LATE_FEE_AMOUNT_'', last_updated=NOW()\r\n\r\nWHERE account_id=''_ACCOUNT_ID_'' AND _user_id=''_USER_ID_'' AND _institution_id=''_INSTITUTION_ID_'''),
(154, 'save_raw_credit_account', 'INSERT INTO bank_accounts_credit_raw (\r\naccount_id, _user_id, status, account_number, account_number_real, account_nickname, display_position, _institution_id, description, registered_user_name, balance_amount, balance_date, balance_previous_amount, last_transaction_date, aggr_success_date, aggr_attempt_date, aggr_status_code, currency_code, bank_id, institution_login_id, credit_account_type, detailed_description, interest_rate, credit_available_amount, credit_max_amount, cash_advance_available_amount, cash_advance_max_amount, cash_advance_balance, cash_advance_interest_rate, current_balance, payment_min_amount, payment_due_date, previous_balance, statement_end_date, statement_purchase_amount, statement_finance_amount, past_due_amount, last_payment_amount, last_payment_date, statement_close_balance, statement_late_fee_amount, last_updated\r\n) VALUES (\r\n''_ACCOUNT_ID_'', ''_USER_ID_'', ''_STATUS_'', ''_ACCOUNT_NUMBER_'', ''_ACCOUNT_NUMBER_REAL_'', ''_ACCOUNT_NICKNAME_'', ''_DISPLAY_POSITION_'', ''_INSTITUTION_ID_'', ''_DESCRIPTION_'', ''_REGISTERED_USER_NAME_'', ''_BALANCE_AMOUNT_'', ''_BALANCE_DATE_'', ''_BALANCE_PREVIOUS_AMOUNT_'', ''_LAST_TRANSACTION_DATE_'', ''_AGGR_SUCCESS_DATE_'', ''_AGGR_ATTEMPT_DATE_'', ''_AGGR_STATUS_CODE_'', ''_CURRENCY_CODE_'', ''_BANK_ID_'', ''_INSTITUTION_LOGIN_ID_'', ''_CREDIT_ACCOUNT_TYPE_'', ''_DETAILED_DESCRIPTION_'', ''_INTEREST_RATE_'', ''_CREDIT_AVAILABLE_AMOUNT_'', ''_CREDIT_MAX_AMOUNT_'', ''_CASH_ADVANCE_AVAILABLE_AMOUNT_'', ''_CASH_ADVANCE_MAX_AMOUNT_'', ''_CASH_ADVANCE_BALANCE_'', ''_CASH_ADVANCE_INTEREST_RATE_'', ''_CURRENT_BALANCE_'', ''_PAYMENT_MIN_AMOUNT_'', ''_PAYMENT_DUE_DATE_'', ''_PREVIOUS_BALANCE_'', ''_STATEMENT_END_DATE_'', ''_STATEMENT_PURCHASE_AMOUNT_'', ''_STATEMENT_FINANCE_AMOUNT_'', ''_PAST_DUE_AMOUNT_'', ''_LAST_PAYMENT_AMOUNT_'', ''_LAST_PAYMENT_DATE_'', ''_STATEMENT_CLOSE_BALANCE_'', ''_STATEMENT_LATE_FEE_AMOUNT_'', NOW()\r\n)'),
(155, 'get_raw_transaction_by_field', 'SELECT * FROM transactions_raw WHERE _FIELD_NAME_=''_FIELD_VALUE_'' _LIMIT_TEXT_'),
(156, 'update_raw_transaction', 'UPDATE transactions_raw SET transaction_type=''_TRANSACTION_TYPE_'', currency_type=''_CURRENCY_TYPE_'', institution_transaction_id=''_INSTITUTION_TRANSACTION_ID_'', correct_institution_transaction_id=''_CORRECT_INSTITUTION_TRANSACTION_ID_'', correct_action=''_CORRECT_ACTION_'', server_transaction_id=''_SERVER_TRANSACTION_ID_'', check_number=''_CHECK_NUMBER_'', reference_number=''_REF_NUMBER_'', confirmation_number=''_CONFIRMATION_NUMBER_'', payee_id=''_PAYEE_ID_'', payee_name=''_PAYEE_NAME_'', extended_payee_name=''_EXTENDED_PAYEE_NAME_'', memo=''_MEMO_'', type=''_TYPE_'', value_type=''_VALUE_TYPE_'', currency_rate=''_CURRENCY_RATE_'', original_currency=''_ORIGINAL_CURRENCY_'', posted_date=''_POSTED_DATE_'', user_date=''_USER_DATE_'', available_date=''_AVAILABLE_DATE_'', amount=''_AMOUNT_'', running_balance_amount=''_RUNNING_BALANCE_AMOUNT_'', pending=''_PENDING_'', normalized_payee_name=''_NORMALIZED_PAYEE_NAME_'', merchant=''_MERCHANT_'', sic=''_SIC_'', source=''_SOURCE_'', category_name=''_CATEGORY_NAME_'', context_type=''_CONTEXT_TYPE_'', schedule_c=''_SCHEDULE_C_'', banking_transaction_type=''_BANKING_TRANSACTION_TYPE_'', subaccount_fund_type=''_SUBACCOUNT_FUND_TYPE_'', banking_401k_source_type=''_BANKING_401K_SOURCE_TYPE_'', principal_amount=''_PRINCIPAL_AMOUNT_'', interest_amount=''_INTEREST_AMOUNT_'', escrow_total_amount=''_ESCROW_TOTAL_AMOUNT_'', escrow_tax_amount=''_ESCROW_TAX_AMOUNT_'', escrow_insurance_amount=''_ESCROW_INSURANCE_AMOUNT_'', escrow_pmi_amount=''_ESCROW_PMI_AMOUNT_'', escrow_fees_amount=''_ESCROW_FEES_AMOUNT_'', escrow_other_amount=''_ESCROW_OTHER_AMOUNT_'', last_update_date=NOW(), latitude=''_LATITUDE_'', longitude=''_LONGITUDE_'', zipcode=''_ZIPCODE_'', state=''_STATE_'', city=''_CITY_'', address=''_ADDRESS_'', sub_category_id=''_SUB_CATEGORY_ID_'', contact_telephone=''_CONTACT_TELEPHONE_'', website=''_WEBSITE_'', confidence_level=''_CONFIDENCE_LEVEL_'', place_type=''_PLACE_TYPE_'', _user_id=''_USER_ID_'', _bank_id=''_BANK_ID_'', api_account=''_API_ACCOUNT_'' WHERE transaction_id=''_TRANSACTION_ID_'''),
(157, 'save_raw_transaction', 'INSERT INTO transactions_raw (transaction_id, transaction_type, currency_type,  institution_transaction_id, correct_institution_transaction_id, correct_action, server_transaction_id, check_number, reference_number, confirmation_number, payee_id, payee_name, extended_payee_name, memo, type, value_type, currency_rate, original_currency, posted_date, user_date, available_date, amount, running_balance_amount, pending, normalized_payee_name, merchant, sic, source, category_name, context_type, schedule_c, banking_transaction_type, subaccount_fund_type, banking_401k_source_type, principal_amount, interest_amount, escrow_total_amount, escrow_tax_amount, escrow_insurance_amount, escrow_pmi_amount, escrow_fees_amount, escrow_other_amount, last_update_date, latitude, longitude, zipcode, state, city, address, sub_category_id, contact_telephone, website, confidence_level, place_type, _user_id, _bank_id, api_account) \nVALUES \n(''_TRANSACTION_ID_'', ''_TRANSACTION_TYPE_'', ''_CURRENCY_TYPE_'', ''_INSTITUTION_TRANSACTION_ID_'', ''_CORRECT_INSTITUTION_TRANSACTION_ID_'', ''_CORRECT_ACTION_'', ''_SERVER_TRANSACTION_ID_'', ''_CHECK_NUMBER_'', ''_REF_NUMBER_'', ''_CONFIRMATION_NUMBER_'', ''_PAYEE_ID_'', ''_PAYEE_NAME_'', ''_EXTENDED_PAYEE_NAME_'', ''_MEMO_'', ''_TYPE_'', ''_VALUE_TYPE_'', ''_CURRENCY_RATE_'', ''_ORIGINAL_CURRENCY_'', ''_POSTED_DATE_'', ''_USER_DATE_'', ''_AVAILABLE_DATE_'', ''_AMOUNT_'', ''_RUNNING_BALANCE_AMOUNT_'', ''_PENDING_'', ''_NORMALIZED_PAYEE_NAME_'', ''_MERCHANT_'', ''_SIC_'', ''_SOURCE_'', ''_CATEGORY_NAME_'', ''_CONTEXT_TYPE_'', ''_SCHEDULE_C_'', ''_BANKING_TRANSACTION_TYPE_'', ''_SUBACCOUNT_FUND_TYPE_'', ''_BANKING_401K_SOURCE_TYPE_'', ''_PRINCIPAL_AMOUNT_'', ''_INTEREST_AMOUNT_'', ''_ESCROW_TOTAL_AMOUNT_'', ''_ESCROW_TAX_AMOUNT_'', ''_ESCROW_INSURANCE_AMOUNT_'', ''_ESCROW_PMI_AMOUNT_'', ''_ESCROW_FEES_AMOUNT_'', ''_ESCROW_OTHER_AMOUNT_'', NOW(), ''_LATITUDE_'', ''_LONGITUDE_'', ''_ZIPCODE_'', ''_STATE_'', ''_CITY_'', ''_ADDRESS_'', ''_SUB_CATEGORY_ID_'', ''_CONTACT_TELEPHONE_'', ''_WEBSITE_'', ''_CONFIDENCE_LEVEL_'', ''_PLACE_TYPE_'', ''_USER_ID_'', ''_BANK_ID_'', ''_API_ACCOUNT_'')'),
(158, 'get_un_saved_raw_transaction_ids', 'SELECT id FROM transactions_raw WHERE is_saved=''N'' AND _user_id=''_USER_ID_'' AND _bank_id=''_BANK_ID_'' '),
(159, 'get_transaction_ids_with_stores', 'SELECT id FROM transactions WHERE _store_id <> '''' AND _store_id IS NOT NULL AND _raw_id IN (_RAW_ID_LIST_)'),
(161, 'get_unprocessed_accounts', 'SELECT A.* FROM _TABLE_NAME_ A WHERE A.is_saved=''N'' _MORE_CONDITIONS_ _LIMIT_TEXT_'),
(162, 'add_bank_account', 'INSERT IGNORE INTO bank_accounts (_user_id, account_type, account_id, account_number, _bank_id, issue_bank_name, card_holder_full_name, account_nickname, currency_code, is_verified, status) \n\n(SELECT ''_USER_ID_'' AS _user_id, ''_ACCOUNT_TYPE_'' AS account_type, ''_ACCOUNT_ID_'' AS account_id, ''_ACCOUNT_NUMBER_'' AS account_number, ''_BANK_ID_'' AS _bank_id, institution_name AS issue_bank_name, ''_CARD_HOLDER_FULL_NAME_'' AS card_holder_full_name, ''_ACCOUNT_NICKNAME_'' AS account_nickname, ''_CURRENCY_CODE_'' AS currency_code, ''_IS_VERIFIED_'' AS is_verified, ''active'' AS status \nFROM banks \nWHERE id=''_BANK_ID_'')'),
(163, 'update_account_as_saved', 'UPDATE _ACCOUNT_TABLE_NAME_ SET is_saved=''_IS_SAVED_'' WHERE id=''_ID_'''),
(164, 'update_user_value', 'UPDATE users SET _FIELD_NAME_=''_FIELD_VALUE_'' WHERE id=''_USER_ID_'''),
(165, 'mark_previous_tracking_as_not_active', 'UPDATE _TABLE_NAME_ SET is_latest=''N'' WHERE _bank_account_id=''_BANK_ACCOUNT_ID_'' AND _user_id=''_USER_ID_'''),
(166, 'add_user_account_tracking', 'INSERT INTO _TABLE_NAME_ ( _bank_account_id, _user_id, _BALANCE_FIELD_, read_date, is_latest) VALUES (''_BANK_ACCOUNT_ID_'', ''_USER_ID_'', ''_BALANCE_VALUE_'', NOW(), ''Y'')'),
(167, 'update_user_balance', 'UPDATE users \nSET _TYPE__balance=(SELECT SUM(B._TYPE__amount) FROM user__TYPE__tracking B WHERE B.is_latest=''Y'' AND _user_id=''_USER_ID_'') \n\nWHERE id=''_USER_ID_'''),
(168, 'get_bank_account', 'SELECT * FROM bank_accounts WHERE _user_id=''_USER_ID_'' AND account_id=''_ACCOUNT_ID_'' AND _bank_id=''_BANK_ID_'''),
(169, 'update_user_default_score', 'UPDATE users \nSET default_store_score=(SELECT IF((SELECT total_score \n	FROM cacheview__store_score_by_default \n	WHERE user_id=''_USER_ID_'' LIMIT 1) IS NOT NULL, total_score, 0) \nFROM cacheview__store_score_by_default WHERE user_id=''_USER_ID_'' LIMIT 1) \nWHERE id=''_USER_ID_'''),
(170, 'get_new_store_scores', 'SELECT STORES.id AS store_id, \n(SELECT cap_first_letter_in_words(name) FROM stores WHERE id=STORES.id LIMIT 1) AS store_name,  \nget_store_score(''_USER_NAME_'', STORES.id) AS store_score\nFROM (SELECT T._store_id AS id, R.last_update_date AS process_date FROM transactions T LEFT JOIN transactions_raw R ON (T._raw_id=R.id) \n	WHERE T._user_id=''_USER_NAME_'' AND T._bank_id=''_BANK_ID_'' AND T._store_id > 0 AND DATE(R.last_update_date) = DATE(NOW()) _LIMIT_TEXT_) STORES \nORDER BY STORES.process_date DESC'),
(171, 'get_user_group_types', 'SELECT DISTINCT G.group_type FROM clout_v1_3iam.user_access A LEFT JOIN clout_v1_3iam.permission_groups G ON (A.permission_group_id=G.id) WHERE A.user_id=''_USER_ID_'''),
(172, 'get_user_permissions', 'SELECT P.code AS permission_code FROM clout_v1_3iam.user_access A \nLEFT JOIN clout_v1_3iam.permission_group_mapping_permissions PM ON (A.permission_group_id=PM._group_id) \nLEFT JOIN clout_v1_3iam.permissions P ON (PM._permission_id=P.id) \n\nWHERE A.user_id=''_USER_ID_'''),
(173, 'get_user_rules', 'SELECT R.code AS rule_code FROM clout_v1_3iam.user_access A \r\nLEFT JOIN clout_v1_3iam.permission_group_mapping_rules RM ON (A.permission_group_id=RM._group_id) \r\nLEFT JOIN clout_v1_3iam.rules R ON (RM._rule_id=R.id) \r\n\r\nWHERE A.user_id=''_USER_ID_'''),
(174, 'get_rule_by_code', 'SELECT details FROM clout_v1_3iam.rules WHERE code=''_CODE_'' AND status=''active'''),
(175, 'add_user_permission_group', 'INSERT INTO clout_v1_3iam.user_access (user_id, permission_group_id, user_name, password, last_updated) \n(SELECT ''_USER_ID_'' AS user_id, G.id AS permission_group_id, ''_USER_NAME_'' AS user_name, ''_PASSWORD_'' AS password, NOW() AS last_updated FROM clout_v1_3iam.permission_groups G WHERE LOWER(G.name)=LOWER(''_GROUP_NAME_''))\n\nON DUPLICATE KEY UPDATE password=VALUES(password), last_updated=VALUES(last_updated)'),
(176, 'get_store_categories', 'SELECT * FROM categories_level_1 WHERE is_active=''Y'' ORDER BY preferred_rank, name'),
(177, 'get_search_suggestions', 'SELECT S.suggestion AS suggestion, \nIF(S.suggestion = ''_PHRASE_'', 1, \nIF(S.suggestion LIKE CONCAT(''_PHRASE_'', ''%''), 2, \nIF(S.suggestion LIKE CONCAT(''%'', ''_PHRASE_'', ''%''), 3,\n4))) AS list_order\n\nFROM (\n(SELECT cap_first_letter_in_words(name) AS suggestion FROM cacheview__default_search_suggestions \nWHERE MATCH(`name`) AGAINST(CONCAT(''+"'', SUBSTRING_INDEX(''_PHRASE_'', '' '', 1), ''"'')) \n_LIMIT_TEXT_1_)\n\nUNION \n\n(SELECT user_phrase AS suggestion FROM cacheview__search_tracking_summary \nWHERE MATCH(user_phrase) AGAINST(CONCAT(''+"'', SUBSTRING_INDEX(''_PHRASE_'', '' '', 1), ''"'')) \n_LIMIT_TEXT_1_)\n) S\n\nWHERE LENGTH(SUBSTRING_INDEX(''_PHRASE_'', '' '', 1)) > 2 AND S.suggestion LIKE CONCAT(''%'', SUBSTRING_INDEX(''_PHRASE_'', '' '', 1), ''%'') \nORDER BY list_order ASC \n_LIMIT_TEXT_1_;'),
(178, 'get_location_zipcodes', 'SELECT DISTINCT zipcode AS suggestion FROM zipcodes WHERE zipcode LIKE ''_PHRASE_%'' _LIMIT_TEXT_'),
(179, 'get_transaction_categories', 'SELECT DISTINCT C._sub_category_id AS sub_category_id FROM transaction_sub_categories C LEFT JOIN transactions T ON (C._transaction_id=T.id) WHERE T._raw_id IN (_RAW_ID_LIST_) '),
(180, 'get_search_suggestions_details_level3', 'SELECT S.id AS store_id, \ncap_first_letter_in_words(S.name) AS name, \ncap_first_letter_in_words(S.address_line_1) AS address_line_1, \ncap_first_letter_in_words(S.address_line_2) AS address_line_2, \nS.city, S.state, S._country_code AS country, S.zipcode, S.latitude, S.longitude, LOWER(S.website) AS website, S.small_cover_image AS store_banner,  \n(SELECT _chain_id FROM store_chains WHERE _store_id=S.id LIMIT 1) AS chain_id, \n(SELECT C.small_banner FROM chains C LEFT JOIN store_chains CS ON (CS._chain_id=C.id) WHERE CS._store_id=S.id LIMIT 1) AS chain_banner,\nS.distance,\nget_store_score(''_USER_ID_'', S.id) AS store_score,\nhas_perk(''_USER_ID_'', S.id) AS has_perk,\nget_cashback_range(''_USER_ID_'', S.id, ''min'') AS min_cashback,\nget_cashback_range(''_USER_ID_'', S.id, ''max'') AS max_cashback,\nget_store_earnings(''_USER_ID_'', S.id,'''') AS store_earnings, \n(SELECT C1.name FROM categories_level_1 C1 WHERE  _INNER_CATEGORY_CONDITION_  LIMIT 1) AS search_category, \nIF(S.id IN (SELECT store_id FROM cacheview__store_score_by_store WHERE user_id=''_USER_ID_''), ''Y'',''N'') AS has_shopped_here, \nS.list_order\n\nFROM \n(SELECT S.*, \nget_distance(_LATITUDE_, _LONGITUDE_, S.latitude, S.longitude) AS distance,\n_CATEGORY_FIELD_\nIF(S.`name` = ''_PHRASE_'', 1, \nIF(S.`name` LIKE CONCAT(''_PHRASE_'', ''%''), 2, \nIF(S.`name` LIKE CONCAT(''%'', ''_PHRASE_'', ''%''), 3, \nIF(''_PHRASE_'' LIKE ''% %'' AND LENGTH(SUBSTRING_INDEX(''_PHRASE_'', '' '', 1 )) > 3 AND S.`name` LIKE CONCAT(SUBSTRING_INDEX(''_PHRASE_'', '' '', 1 ), ''%'') AND ''_LOCATION_PHRASE_'' LIKE CONCAT(''%'', S.`address_line_1`, ''%''), 4, \nIF(''_LOCATION_PHRASE_'' LIKE CONCAT(''%'', S.`address_line_1`, ''%''), 5, \nIF((''_LOCATION_PHRASE_'' LIKE CONCAT(''%'', S.`city`, ''%'') AND S.`address_line_1` LIKE CONCAT(''%'',REPLACE('' '', ''% '', ''_LOCATION_PHRASE_''),''%'')), 6, \nIF(''_LOCATION_PHRASE_'' LIKE CONCAT(''%'', S.`zipcode`, ''%''), 7, \nIF(''_LOCATION_PHRASE_'' LIKE CONCAT(''%'', S.`city`, ''%''), 8, \n9)))))))) AS list_order\n\nFROM stores S \n_PROMOTION_JOIN_ \nWHERE MATCH(S.name) AGAINST(CONCAT(''+'', ''_PHRASE_''))\n\n_CUSTOM_FILTER_1_ \n_DISTANCE_CONDITION_ _OUTER_CATEGORY_CONDITION_\n_LIMIT_TEXT_1_ \n) S \n\nORDER BY S.list_order ASC, _CUSTOM_ORDER_'),
(181, 'get_ids_of_stores_where_user_shopped', 'SELECT GROUP_CONCAT(store_id SEPARATOR "'',''") AS store_list FROM `cacheview__store_score_by_store` WHERE user_id=''_USER_ID_'' _LIMIT_TEXT_'),
(182, 'add_store_chain', 'INSERT INTO store_chains (_chain_id, _store_id, date_entered, _entered_by) \r\nVALUES (''_CHAIN_ID_'', ''_STORE_ID_'', NOW(), ''_USER_ID_'') \r\nON DUPLICATE KEY UPDATE _chain_id=VALUES(_chain_id)'),
(183, 'add_new_chain_or_update_banner', 'INSERT INTO chains (name, address_line_1, address_line_2, city, state, zipcode, country, website, small_banner, is_live, date_entered, _entered_by) \r\n\r\nVALUES (''_NAME_'', ''_ADDRESS_LINE_1_'', ''_ADDRESS_LINE_2_'', ''_CITY_'', ''_STATE_'', ''_ZIPCODE_'', ''_COUNTRY_'', ''_WEBSITE_'', ''_SMALL_BANNER_'', ''Y'', NOW(), ''_USER_ID_'')\r\n\r\nON DUPLICATE KEY UPDATE small_banner=VALUES(small_banner)'),
(184, 'get_store_hours', 'SELECT * FROM store_hours WHERE _store_id=''_STORE_ID_'' \nORDER BY FIELD(week_day, ''monday'', ''tuesday'', ''wednesday'', ''thursday'', ''friday'', ''saturday'', ''sunday'');'),
(185, 'get_store_features', 'SELECT id, feature FROM store_features WHERE _store_id=''_STORE_ID_'''),
(186, 'get_store_transaction_statistics', 'SELECT \n(SELECT COUNT(transaction_id) FROM view__user_spending_summary WHERE user_id=''_USER_ID_'' AND store_id=''_STORE_ID_'') AS lifeTimeSpendingTransactions, \n(SELECT SUM(amount) FROM view__user_spending_summary WHERE user_id=''_USER_ID_'' AND store_id=''_STORE_ID_'') AS lifeTimeSpendingAmount, \n(SELECT DATEDIFF(NOW(), start_date) FROM view__user_spending_summary WHERE user_id=''_USER_ID_'' AND store_id=''_STORE_ID_'' ORDER BY start_date DESC LIMIT 1) AS daysSinceLastTransaction, \n(SELECT amount FROM view__user_spending_summary WHERE user_id=''_USER_ID_'' AND store_id=''_STORE_ID_'' ORDER BY start_date DESC LIMIT 1) AS lastTransactionAmount, \n(SELECT COUNT(id) FROM commissions_transactions WHERE _user_id=''_USER_ID_'' AND _store_id=''_STORE_ID_'' AND status=''approved'') AS availableRewards, \n(SELECT SUM(pay_out) FROM commissions_transactions WHERE _user_id=''_USER_ID_'' AND _store_id=''_STORE_ID_'' AND status=''approved'') AS availableRewardAmount, \n(SELECT COUNT(id) FROM commissions_transactions WHERE _user_id=''_USER_ID_'' AND _store_id=''_STORE_ID_'' AND status=''pending'') AS pendingRewards, \n(SELECT SUM(pay_out) FROM commissions_transactions WHERE _user_id=''_USER_ID_'' AND _store_id=''_STORE_ID_'' AND status=''pending'') AS pendingRewardAmount\n'),
(187, 'add_favorite_store', 'INSERT IGNORE INTO store_favorites (_user_id, _store_id, date_entered) \r\nVALUES (''_USER_ID_'', ''_STORE_ID_'', NOW())'),
(188, 'get_search_suggestions_details_level1', 'SELECT S.id AS store_id, \ncap_first_letter_in_words(S.name) AS name, \ncap_first_letter_in_words(S.address_line_1) AS address_line_1, \ncap_first_letter_in_words(S.address_line_2) AS address_line_2, \nS.city, S.state, S._country_code AS country, S.zipcode, S.latitude, S.longitude, LOWER(S.website) AS website, S.small_cover_image AS store_banner,  \n(SELECT _chain_id FROM store_chains WHERE _store_id=S.id LIMIT 1) AS chain_id, \n(SELECT C.small_banner FROM chains C LEFT JOIN store_chains CS ON (CS._chain_id=C.id) WHERE CS._store_id=S.id LIMIT 1) AS chain_banner,\nS.distance,\nget_store_score(''_USER_ID_'', S.id) AS store_score,\nhas_perk(''_USER_ID_'', S.id) AS has_perk,\nget_cashback_range(''_USER_ID_'', S.id, ''min'') AS min_cashback,\nget_cashback_range(''_USER_ID_'', S.id, ''max'') AS max_cashback,\nget_store_earnings(''_USER_ID_'', S.id,'''') AS store_earnings, \n(SELECT C1.name FROM categories_level_1 C1 WHERE  _INNER_CATEGORY_CONDITION_  LIMIT 1) AS search_category, \nIF(S.id IN (SELECT store_id FROM cacheview__store_score_by_store WHERE user_id=''_USER_ID_''), ''Y'',''N'') AS has_shopped_here, \nS.list_order\n\nFROM \n(SELECT S.*, \nget_distance(_LATITUDE_, _LONGITUDE_, S.latitude, S.longitude) AS distance,\n_CATEGORY_FIELD_\nIF(''_LOCATION_PHRASE_'' LIKE CONCAT(''%'', S.`address_line_1`, ''%''), 1, \nIF((''_LOCATION_PHRASE_'' LIKE CONCAT(''%'', S.`city`, ''%'') AND S.`address_line_1` LIKE CONCAT(''%'',REPLACE('' '', ''% '', ''_LOCATION_PHRASE_''),''%'')), 2, \nIF(''_LOCATION_PHRASE_'' LIKE CONCAT(''%'', S.`zipcode`, ''%''), 3, \nIF(''_LOCATION_PHRASE_'' LIKE CONCAT(''%'', S.`city`, ''%''), 4, \n5)))) AS list_order\n\nFROM stores S \n_PROMOTION_JOIN_ \n_CUSTOM_FILTER_2_ \n_DISTANCE_CONDITION_ _OUTER_CATEGORY_CONDITION_\n_LIMIT_TEXT_1_ \n) S \n\nORDER BY S.list_order ASC, FIELD(has_shopped_here, ''Y'',''N''), _CUSTOM_ORDER_'),
(189, 'get_search_suggestions_details_level2', 'SELECT DATA1.* FROM \n(\n\n(SELECT S.id AS store_id, \ncap_first_letter_in_words(S.name) AS name, \ncap_first_letter_in_words(S.address_line_1) AS address_line_1, \ncap_first_letter_in_words(S.address_line_2) AS address_line_2, \nS.city, S.state, S._country_code AS country, S.zipcode, S.latitude, S.longitude, LOWER(S.website) AS website, S.small_cover_image AS store_banner,  \nC.id AS chain_id, C.small_banner AS chain_banner,\nget_distance(_LATITUDE_, _LONGITUDE_, S.latitude, S.longitude) AS distance,\nget_store_score(''_USER_ID_'', S.id) AS store_score,\nhas_perk(''_USER_ID_'', S.id) AS has_perk,\nget_cashback_range(''_USER_ID_'', S.id, ''min'') AS min_cashback,\nget_cashback_range(''_USER_ID_'', S.id, ''max'') AS max_cashback,\nget_store_earnings(''_USER_ID_'', S.id,'''') AS store_earnings, \n''Y'' AS has_shopped_here, \n\n_CATEGORY_FIELD_\n(SELECT C1.name FROM categories_level_1 C1 WHERE _INNER_CATEGORY_CONDITION_ LIMIT 1) AS search_category, \n\nIF(''_LOCATION_PHRASE_'' LIKE CONCAT(''%'', S.`address_line_1`, ''%''), 1, \nIF((''_LOCATION_PHRASE_'' LIKE CONCAT(''%'', S.`city`, ''%'') AND S.`address_line_1` LIKE CONCAT(''%'',REPLACE('' '', ''% '', ''''),''%'')), 2, \nIF(''_LOCATION_PHRASE_'' LIKE CONCAT(''%'', S.`zipcode`, ''%''), 3, \nIF(''_LOCATION_PHRASE_'' LIKE CONCAT(''%'', S.`city`, ''%''), 4, \n5)))) AS list_order\n\nFROM stores S \nLEFT JOIN store_chains CS ON (CS._store_id=S.id) \nLEFT JOIN chains C ON (C.id=CS._chain_id) \n_PROMOTION_JOIN_ \nWHERE S.id IN (SELECT store_id FROM cacheview__store_score_by_store WHERE user_id=''_USER_ID_'')\n_CUSTOM_FILTER_1_ \n_DISTANCE_CONDITION_ _OUTER_CATEGORY_CONDITION_ \nORDER BY list_order ASC \n_LIMIT_TEXT_1_ \n) \n\nUNION \n\n(SELECT S.id AS store_id, \ncap_first_letter_in_words(S.name) AS name, \ncap_first_letter_in_words(S.address_line_1) AS address_line_1, \ncap_first_letter_in_words(S.address_line_2) AS address_line_2, \nS.city, S.state, S._country_code AS country, S.zipcode, S.latitude, S.longitude, LOWER(S.website) AS website, S.small_cover_image AS store_banner, \n(SELECT _chain_id FROM store_chains WHERE _store_id=S.id LIMIT 1) AS chain_id, \n(SELECT C.small_banner FROM chains C LEFT JOIN store_chains CS ON (CS._chain_id=C.id) WHERE CS._store_id=S.id LIMIT 1) AS chain_banner,\nget_distance(_LATITUDE_, _LONGITUDE_, S.latitude, S.longitude) AS distance,\nget_store_score(''_USER_ID_'', S.id) AS store_score,\nhas_perk(''_USER_ID_'', S.id) AS has_perk,\nget_cashback_range(''_USER_ID_'', S.id, ''min'') AS min_cashback,\nget_cashback_range(''_USER_ID_'', S.id, ''max'') AS max_cashback,\nget_store_earnings(''_USER_ID_'', S.id,'''') AS store_earnings, \n''N'' AS has_shopped_here, \n\n_CATEGORY_FIELD_  \n(SELECT C1.name FROM categories_level_1 C1 WHERE  _INNER_CATEGORY_CONDITION_  LIMIT 1) AS search_category, \nS.list_order \n\nFROM (SELECT S.*,\n_CATEGORY_FIELD_  \nget_distance(34.070436, -118.35048, S.latitude, S.longitude) AS distance,\nIF(''_LOCATION_PHRASE_'' LIKE CONCAT(''%'', S.`address_line_1`, ''%''), 1, \nIF((''_LOCATION_PHRASE_'' LIKE CONCAT(''%'', S.`city`, ''%'') AND S.`address_line_1` LIKE CONCAT(''%'',REPLACE('' '', ''% '', ''_LOCATION_PHRASE_''),''%'')), 2, \nIF(''_LOCATION_PHRASE_'' LIKE CONCAT(''%'', S.`zipcode`, ''%''), 3, \nIF(''_LOCATION_PHRASE_'' LIKE CONCAT(''%'', S.`city`, ''%''), 4, \n5)))) AS list_order\n\nFROM stores S \n_PROMOTION_JOIN_ \n_CUSTOM_FILTER_2_ \n_DISTANCE_CONDITION_ _OUTER_CATEGORY_CONDITION_  \n_LIMIT_TEXT_2_) S \nORDER BY S.list_order ASC\n) \n\n) DATA1\nORDER BY  FIELD(has_shopped_here, ''Y'',''N''), _CUSTOM_ORDER_'),
(190, 'add_user_security_settings', 'INSERT INTO `user_security_settings` (_user_id, user_type, user_type_level, last_updated, _last_updated_by) \n\nVALUES (''_USER_ID_'', ''_USER_TYPE_'', ''_USER_TYPE_LEVEL_'', NOW(), ''_USER_ID_'')'),
(191, 'count_stores_where_user_shopped', 'SELECT COUNT(store_id) AS shopCount FROM cacheview__store_score_by_store WHERE user_id=''_USER_ID_'''),
(192, 'get_list_of_store_reviews', 'SELECT review_score AS score, comment AS details, \n(SELECT CONCAT(U.first_name, '' '', SUBSTR(U.last_name,1,1),''.'')) AS user_name,\n(SELECT CONCAT(L.city, '' '', L.state) FROM user_geo_tracking L \nWHERE L._user_id=R._user_id ORDER BY L.tracking_time DESC LIMIT 1) AS user_location,\nU.photo_url AS user_photo\n\nFROM reviews R \nLEFT JOIN users U ON (R._user_id=U.id) \nWHERE R.status=''active'' AND U.id IS NOT NULL AND R._store_id=''_STORE_ID_'' \nORDER BY R.last_updated DESC\n_LIMIT_TEXT_ '),
(193, 'add_store_review', 'INSERT INTO reviews (_user_id, _store_id, comment, review_score, status, date_entered, last_updated, _last_updated_by) \nVALUES (''_USER_ID_'', ''_STORE_ID_'', ''_COMMENT_'', ''_SCORE_'', ''active'', NOW(), NOW(), ''_USER_ID_'')\n\nON DUPLICATE KEY UPDATE review_score=VALUES(review_score), comment=VALUES(comment), last_updated=NOW();'),
(194, 'get_list_of_store_photos', 'SELECT *, CONCAT(''_BASE_IMAGE_URL_'',photo_url) AS photo FROM store_photos WHERE _store_id=''_STORE_ID_''\nORDER BY display_order ASC, date_entered DESC \n_LIMIT_TEXT_'),
(195, 'add_store_photo', 'INSERT INTO store_photos (photo_url, photo_note, photo_category, status, _store_id, date_entered, _entered_by) \nVALUES (''_PHOTO_URL_'', ''_PHOTO_NOTE_'', ''_PHOTO_CATEGORY_'', ''_STATUS_'', ''_STORE_ID_'', NOW(), ''_USER_ID_'')'),
(196, 'get_referral_count', 'SELECT COUNT(DISTINCT R._user_id) AS referral_count FROM referrals R WHERE R._referred_by=''_USER_ID_'' _QUERY_PART_'),
(197, 'get_referral_ids', 'SELECT R._user_id AS user_id FROM referrals R WHERE R._referred_by=''_USER_ID_'' _QUERY_PART_'),
(198, 'get_user_referrals', 'SELECT R.*, U.first_name, U.last_name, U.email_address \nFROM referrals R \nLEFT JOIN users U ON (R._user_id=U.id) \nWHERE R._referred_by=''_USER_ID_'' _QUERY_PART_ \nORDER BY R.activation_date DESC'),
(199, 'get_user_network_referrals', 'SELECT R.*, U.first_name, U.last_name, U.email_address \nFROM referrals R \nLEFT JOIN users U ON (R._user_id=U.id) \nWHERE R._user_id IN (_USER_ID_LIST_) \nORDER BY U.first_name _LIMIT_TEXT_ '),
(200, 'get_number_of_invites', 'SELECT COUNT(id) AS invite_count FROM message_invites WHERE _user_id = ''_USER_ID_'' AND number_of_invitations > 0'),
(201, 'get_user_earnings', 'SELECT SUM(amount) AS amount FROM user_payment_tracking WHERE _user_id=''_USER_ID_'' AND status NOT IN (''declined'',''closed'') _DATE_CONDITION_'),
(202, 'get_clout_score_details_by_key', 'SELECT \n(SELECT MAX(activation_date) FROM referrals WHERE _referred_by = ''_USER_ID_'') AS last_time_user_joined_my_direct_network, \n(SELECT MAX(last_invitation_sent_on) FROM message_invites WHERE _user_id=''_USER_ID_'' AND message_status=''sent'') AS last_time_invite_was_sent, \n(SELECT MAX(pay_date) FROM user_payment_tracking WHERE `status`=''approved'' AND _user_id=''_USER_ID_'') AS last_time_commission_was_earned, \n(SELECT total_network_referrals FROM cacheview__clout_score WHERE user_id=''_USER_ID_'' LIMIT 1) AS total_users_in_my_network, \n(SELECT total_direct_referrals FROM cacheview__clout_score WHERE user_id=''_USER_ID_'' LIMIT 1) AS total_direct_referrals_in_my_network, \n(SELECT total_score FROM cacheview__clout_score WHERE user_id=''_USER_ID_'' LIMIT 1) AS clout_score, \n(SELECT L.commission FROM score_levels L \nLEFT JOIN cacheview__clout_score C ON ((C.total_score BETWEEN L.low_end_score AND L.high_end_score) OR (C.total_score > 999 AND L.high_end_score='''')) \nWHERE C.user_id=''_USER_ID_'' LIMIT 1) AS my_current_commission,\n(SELECT MAX(L.level+0) FROM score_levels L WHERE L.low_end_score <= (SELECT total_score FROM cacheview__clout_score WHERE user_id=''_USER_ID_'')) AS clout_score_level'),
(203, 'get_searchable_referral_list', 'SELECT R.activation_date AS last_activity_date, U.photo_url, U.first_name, U.last_name, CONCAT(U.first_name, '' '', U.last_name) AS name, U.email_address,\n(SELECT COUNT(_user_id) FROM referrals WHERE _referred_by = U.id) AS total_network, \n(SELECT COUNT(DISTINCT friend_id) FROM  message_invites WHERE _user_id = U.id) AS total_invites \n\nFROM referrals R \nLEFT JOIN users U ON (R._user_id=U.id) \nWHERE R._referred_by=''_USER_ID_'' _PHRASE_CONDITION_\nORDER BY R.activation_date DESC \n_LIMIT_TEXT_'),
(204, 'get_searchable_invite_list', 'SELECT I.last_invitation_sent_on AS last_invite_date, IF(I.friend_id <> '''', (SELECT photo_url FROM users WHERE id=I.friend_id LIMIT 1), '''') AS photo_url, I.first_name, I.last_name, CONCAT(I.first_name, '' '', I.last_name) AS name, I.email_address,\nIF(I.friend_id <> '''', (SELECT COUNT(DISTINCT friend_id) FROM  message_invites WHERE _user_id = I.friend_id), ''0'') AS total_invites, \nI.message_status AS invitation_status\n\nFROM message_invites I \nWHERE I._user_id=''_USER_ID_'' _PHRASE_CONDITION_\nORDER BY I.last_invitation_sent_on DESC \n_LIMIT_TEXT_'),
(205, 'check_if_user_unsubscribed_by_email', 'SELECT * FROM unsubscribe_list WHERE email_address=''_EMAIL_ADDRESS_'' AND DATEDIFF(DATE(expiry_date), NOW()) > 0 LIMIT 1'),
(206, 'add_new_invitation_contact', 'INSERT IGNORE INTO contacts (_owner_id, first_name, last_name, phone, email, source, photo_url, date_entered) VALUES (''_OWNER_USER_ID_'', ''_FIRST_NAME_'', ''_LAST_NAME_'', ''_PHONE_NUMBER_'', ''_EMAIL_ADDRESS_'', ''_SOURCE_'', ''_PHOTO_URL_'', NOW())'),
(207, 'get_users_invited_emails', 'SELECT email AS email_address FROM contacts WHERE _owner_id=''_USER_ID_'''),
(208, 'get_known_mail_host', 'SELECT * FROM mail_hosts WHERE domain=''_DOMAIN_'''),
(209, 'add_message_invite', 'INSERT INTO message_invites (_user_id, first_name , last_name, invite_message, email_address, phone_number, method_used, invitation_time, referral_status, message_status, number_of_invitations, last_invitation_sent_on, sent_at_ip_address, _invitation_sent_by, message_status_date, referral_status_date) \n\nVALUES (''_USER_ID_'', ''_FIRST_NAME_'' , ''_LAST_NAME_'', ''_INVITE_MESSAGE_'', ''_EMAIL_ADDRESS_'', ''_PHONE_NUMBER_'', ''_METHOD_USED_'', NOW(), ''pending'', ''_MESSAGE_STATUS_'', ''1'', NOW(), ''_SENT_AT_IP_ADDRESS_'', ''_USER_ID_'', NOW(), NOW())\n\nON DUPLICATE KEY UPDATE first_name=''_FIRST_NAME_'' , last_name=''_LAST_NAME_'', invite_message=''_INVITE_MESSAGE_'', phone_number=''_PHONE_NUMBER_'', message_status=''_MESSAGE_STATUS_'', number_of_invitations=VALUES(number_of_invitations)+1, last_invitation_sent_on=NOW(), sent_at_ip_address=''_SENT_AT_IP_ADDRESS_'', message_status_date=NOW();'),
(210, 'get_user_links', 'SELECT CONCAT(''_BASE_URL_'',url_id) AS link FROM `referral_url_ids` WHERE _user_id=''_USER_ID_'' AND is_active=''Y'''),
(211, 'add_share_link', 'INSERT IGNORE INTO referral_url_ids (_user_id, url_id, is_active, is_primary, date_entered) \nVALUES (''_USER_ID_'', ''_URL_ID_'', ''Y'', ''_IS_PRIMARY_'', NOW())'),
(212, 'get_share_links', 'SELECT url_id AS link_id FROM referral_url_ids WHERE _user_id=''_USER_ID_'' AND is_active=''Y'''),
(213, 'get_message_statistics', 'SELECT \n(SELECT COUNT(_exchange_id) FROM message_status MS WHERE \n	(SELECT status FROM message_status WHERE _exchange_id=MS._exchange_id AND _user_id=MS._user_id ORDER BY date_entered DESC LIMIT 1) IN (''received'', NULL) \n	AND MS._user_id=''_USER_ID_''\n) AS unread, \n\n(SELECT COUNT(DISTINCT _promotion_id) FROM promotion_notices WHERE status=''received'' AND _user_id=''_USER_ID_'') AS events,\n\n(SELECT COUNT(S._exchange_id) FROM message_status S \nLEFT JOIN message_exchange X ON (X.id=S._exchange_id) \nLEFT JOIN message_templates T ON (T.id=X._template_id AND T.message_type=''send_store_schedule'')\nWHERE T.id IS NOT NULL AND S.status=''received'' AND S._user_id=''_USER_ID_'') AS reservations'),
(214, 'get_user_messages', 'SELECT A.*,\nIF(A.status <> ''received'', ''Y'', ''N'') AS is_read\n\nFROM \n(SELECT X.id AS message_id, X.subject, X.attachment_url, UNIX_TIMESTAMP(X.date_entered) AS date_received, \n\nIF(X.sender_type=''user'', (SELECT CONCAT(U.first_name,'' '',U.last_name) FROM users U WHERE U.id=X._recipient_id), \nIF(X.sender_type=''store'', (SELECT S.name FROM stores S WHERE S.id=X._recipient_id LIMIT 1), \n(SELECT C.name FROM chains C WHERE C.id=X._recipient_id LIMIT 1))) AS sender, \n\nIF(X.sender_type=''user'', (SELECT CONCAT(U.address_line_1,'' '',U.address_line_2, '' '', U.city, '' '', U.state, '' '', U.country_code, '' '', U.zipcode) FROM users U WHERE U.id=X._recipient_id), \nIF(X.sender_type=''store'', (SELECT CONCAT(S.address_line_1,'' '',S.address_line_2, '' '', S.city, '' '', S.state, '' '', S._country_code, '' '', S.zipcode) FROM stores S WHERE S.id=X._recipient_id LIMIT 1), \n(SELECT  CONCAT(C.address_line_1,'' '',C.address_line_2, '' '', C.city, '' '', C.state, '' '', C.country, '' '', C.zipcode) FROM chains C WHERE C.id=X._recipient_id LIMIT 1))) AS location,\n\n\nIF((SELECT message_type FROM message_templates WHERE id=X._template_id LIMIT 1) = ''system_alert_notification'', ''Y'', ''N'') AS is_alert,\n(SELECT status FROM message_status WHERE _user_id= ''_USER_ID_'' AND _exchange_id=X.id ORDER BY date_entered DESC LIMIT 1) AS status\n\nFROM message_exchange X \nWHERE X._recipient_id = ''_USER_ID_'' \n_PHRASE_CONDITION_ \n) A \n\nWHERE A.status <> ''archived'' \n_SENDER_CONDITION_ \nGROUP BY A.message_id\nORDER BY FIELD(is_read, ''N'',''Y''), A.date_received DESC  \n_LIMIT_TEXT_'),
(215, 'get_message_details', 'SELECT X.subject, X.details, X.sender_type, \nIF(X.attachment_url <> '''', CONCAT(''_BASE_URL_'',X.attachment_url), '''') AS attachment_url, \nUNIX_TIMESTAMP(X.date_entered) AS date_received, \n\nIF(X.sender_type=''user'', (SELECT CONCAT(U.first_name,'' '',U.last_name) FROM users U WHERE U.id=X._recipient_id), \nIF(X.sender_type=''store'', (SELECT S.name FROM stores S WHERE S.id=X._recipient_id LIMIT 1), \n(SELECT C.name FROM chains C WHERE C.id=X._recipient_id LIMIT 1))) AS sender\n\nFROM message_exchange X \nWHERE X.id = ''_MESSAGE_ID_''\n\n'),
(216, 'add_message_status', 'INSERT INTO message_status (_exchange_id, _user_id, status, date_entered) \nVALUES (''_MESSAGE_ID_'', ''_USER_ID_'', ''_STATUS_'', NOW()) \n\nON DUPLICATE KEY UPDATE date_entered = NOW();'),
(217, 'get_user_store_review', 'SELECT review_score AS score, comment AS details\nFROM reviews R \nWHERE R._user_id =''_USER_ID_'' AND R._store_id=''_STORE_ID_'' '),
(218, 'add_user_referral', 'INSERT IGNORE INTO referrals (_user_id, _referred_by, referrer_type, sent_referral_by, activation_date) \r\nVALUES (''_USER_ID_'', ''_REFERRED_BY_'', ''_REFERRER_TYPE_'', ''_SENT_REFERRAL_BY_'', NOW())'),
(219, 'get_user_settings', 'SELECT _FIELDS_ FROM (\nSELECT U.email_address AS emailAddress, \nU.address_line_1 AS addressLine1, U.address_line_2 AS addressLine2, U.city, U.state, U.country_code AS country, U.zipcode, \nU.gender, \nIF(U.photo_url <>'''', CONCAT(''_BASE_PHOTO_URL_'',U.photo_url), '''') AS photo, \nCONCAT(first_name,'' '', last_name) AS name, UNIX_TIMESTAMP(birthday) AS birthday, telephone, UNIX_TIMESTAMP(date_entered) AS dateJoined, \n(SELECT UNIX_TIMESTAMP(last_updated) FROM clout_v1_3iam.user_access WHERE user_id=U.id LIMIT 1) AS passwordLastUpdated\nFROM users U WHERE U.id=''_USER_ID_''\n) A '),
(220, 'get_saved_addresses', 'SELECT id AS contact_id, address_line_1, address_line_2, city, state, country, zipcode, is_primary, address_type, UNIX_TIMESTAMP(date_entered) AS date_entered FROM contact_addresses WHERE _user_id=''_USER_ID_'' AND is_active IN (''_IS_ACTIVE_'') ORDER BY date_entered DESC'),
(221, 'get_saved_emails', 'SELECT id AS contact_id, email_address, is_primary, UNIX_TIMESTAMP(date_entered) AS date_entered, is_active \nFROM contact_emails WHERE _user_id=''_USER_ID_'' AND is_active IN (''_IS_ACTIVE_'') ORDER BY date_entered DESC'),
(222, 'get_saved_phones', 'SELECT C.id AS contact_id, C._provider_id AS provider_id, C.telephone, C.is_active, \nIF(C._provider_id <> '''', (SELECT full_carrier_name FROM contact_phone_providers WHERE id=C._provider_id LIMIT 1), '''') AS provider_name, \nC.is_primary, UNIX_TIMESTAMP(C.date_entered) AS date_entered \nFROM contact_phones C \nWHERE C._user_id=''_USER_ID_'' AND C.is_active IN (''_IS_ACTIVE_'') \nORDER BY C.date_entered DESC'),
(223, 'add_user_photo', 'UPDATE users SET photo_url=''_PHOTO_URL_'' WHERE id=''_USER_ID_'''),
(224, 'get_system_states', 'SELECT state_code, state_name AS state FROM states WHERE state_name LIKE ''%_PHRASE_%'' ORDER BY state_name _LIMIT_TEXT_'),
(225, 'get_system_countries', 'SELECT code AS country_code, name AS country FROM countries ORDER BY name'),
(226, 'add_user_address', 'INSERT INTO contact_addresses (_user_id, address_line_1, address_line_2, city, state, country, zipcode, address_type, date_entered) \nVALUES (''_USER_ID_'', ''_ADDRESS_LINE_1_'', ''_ADDRESS_LINE_2_'', ''_CITY_'', ''_STATE_'', ''_COUNTRY_'', ''_ZIPCODE_'', ''_ADDRESS_TYPE_'', NOW()) \nON DUPLICATE KEY UPDATE address_line_2=VALUES(address_line_2), state=VALUES(state), country=VALUES(country), is_active=''Y'''),
(227, 'update_address_type', 'UPDATE contact_addresses SET address_type=''_ADDRESS_TYPE_'' WHERE id=''_CONTACT_ID_'''),
(228, 'deactivate_user_address', 'UPDATE contact_addresses SET is_active=''N'' WHERE id=''_CONTACT_ID_'''),
(229, 'add_offer_request', 'INSERT INTO store_offer_requests (_user_id, _store_id, wants_cashback, wants_perks, wants_vip, date_entered, _entered_by, last_updated, _last_updated_by) \n\nVALUES (''_USER_ID_'', ''_STORE_ID_'', ''_WANTS_CASHBACK_'', ''_WANTS_PERKS_'', ''_WANTS_VIP_'', NOW(), ''_USER_ID_'', NOW(), ''_USER_ID_'') \nON DUPLICATE KEY UPDATE wants_cashback=VALUES(wants_cashback), wants_perks=VALUES(wants_perks), wants_vip=VALUES(wants_vip), last_updated=NOW(), _last_updated_by=''_USER_ID_'''),
(230, 'update_offer_request', 'UPDATE store_offer_requests SET per_visit_spend=''_PER_VISIT_SPEND_'', per_month_spend=''_PER_MONTH_SPEND_'', last_updated=NOW(), _last_updated_by=''_USER_ID_'' \r\nWHERE _user_id=''_USER_ID_'' AND _store_id=''_STORE_ID_'''),
(231, 'add_communication_privacy', 'INSERT IGNORE INTO user_preferred_communication (_user_id, message_format) VALUES (''_USER_ID_'', ''_MESSAGE_FORMAT_'')'),
(232, 'delete_communication_privacy', 'DELETE FROM user_preferred_communication WHERE _user_id=''_USER_ID_'' AND message_format=''_MESSAGE_FORMAT_'''),
(233, 'add_user_email_address', 'INSERT IGNORE INTO contact_emails (_user_id, email_address, date_entered, is_active) \nVALUES (''_USER_ID_'', ''_EMAIL_ADDRESS_'', NOW(), ''N'')'),
(234, 'add_email_activation_code', 'UPDATE contact_emails SET activation_code=''_ACTIVATION_CODE_'' WHERE id=''_CONTACT_ID_'''),
(235, 'add_user_telephone', 'INSERT IGNORE INTO contact_phones (_user_id, _provider_id, telephone, is_primary, date_entered, is_active ) \n(SELECT ''_USER_ID_'' AS _user_id, (SELECT id FROM contact_phone_providers WHERE full_carrier_name=''_PROVIDER_'' LIMIT 1) AS _provider_id, ''_TELEPHONE_'' AS telephone, ''_IS_PRIMARY_'' AS is_primary, NOW() AS date_entered, ''N'' AS is_active)'),
(236, 'add_telephone_activation_code', 'UPDATE contact_phones SET activation_code=''_ACTIVATION_CODE_'' WHERE id=''_CONTACT_ID_'''),
(237, 'activate_email_by_code', 'UPDATE contact_emails SET is_active=''Y'' WHERE id=''_CONTACT_ID_'' AND activation_code=''_ACTIVATION_CODE_'''),
(238, 'activate_telephone_by_code', 'UPDATE contact_phones SET is_active=''Y'' WHERE id=''_CONTACT_ID_'' AND activation_code=''_ACTIVATION_CODE_'''),
(239, 'get_communication_preferences', 'SELECT message_format FROM user_preferred_communication WHERE _user_id=''_USER_ID_'''),
(240, 'record_like_messages', 'INSERT INTO message_likes (_exchange_id, _user_id, user_like, user_dislike, date_entered, last_updated)\n\n(SELECT X.id AS _exchange_id, ''_USER_ID_'' AS _user_id, ''_LIKE_'' AS user_like, ''_DISLIKE_'' AS user_dislike, NOW() AS date_entered, NOW() AS last_updated FROM message_exchange X WHERE X.id IN (''_MESSAGES_''))\n\nON DUPLICATE KEY UPDATE user_like=VALUES(user_like), user_dislike=VALUES(user_dislike), last_updated=NOW()'),
(241, 'extract_from_messages_and_add_favorites', 'INSERT IGNORE INTO store_favorites (_user_id, _store_id, date_entered) \n\n(SELECT ''_USER_ID_'' AS _user_id, X._sender_id AS _store_id, NOW() AS date_entered \nFROM message_exchange X \nWHERE X.sender_type=''store'' AND X._sender_id <> ''0'' AND X.id IN (''_MESSAGES_''))'),
(242, 'get_promotion_stores', 'SELECT S.id AS store_id, ''_IS_FEATURED_'' AS is_featured, \ncap_first_letter_in_words(S.name) AS name, \ncap_first_letter_in_words(S.address_line_1) AS address_line_1, \ncap_first_letter_in_words(S.address_line_2) AS address_line_2, \nS.city, S.state, S._country_code AS country, S.zipcode, S.latitude, S.longitude, LOWER(S.website) AS website, S.small_cover_image AS store_banner,  \n(SELECT _chain_id FROM store_chains WHERE _store_id=S.id LIMIT 1) AS chain_id, \n(SELECT C.small_banner FROM chains C LEFT JOIN store_chains CS ON (CS._chain_id=C.id) WHERE CS._store_id=S.id LIMIT 1) AS chain_banner,\nS.distance,\nget_store_score(''_USER_ID_'', S.id) AS store_score,\nhas_perk(''_USER_ID_'', S.id) AS has_perk,\nget_cashback_range(''_USER_ID_'', S.id, ''min'') AS min_cashback,\nget_cashback_range(''_USER_ID_'', S.id, ''max'') AS max_cashback,\nget_store_earnings(''_USER_ID_'', S.id,'''') AS store_earnings, \nIF((SELECT id FROM categories_level_1 WHERE name LIKE '''' LIMIT 1) IS NOT NULL, \n	(SELECT C1.name FROM categories_level_1 C1 WHERE  name LIKE '''' LIMIT 1), \n	(SELECT C1.name FROM categories_level_1 C1 WHERE  C1.id IN (SELECT SC._category_id FROM store_sub_categories SC WHERE SC._store_id=S.id)  LIMIT 1)\n) AS search_category, \nIF((SELECT _store_id FROM transactions WHERE _user_id=''_USER_ID_'' AND _store_id=S.id LIMIT 1) IS NOT NULL, ''Y'',''N'') AS has_shopped_here, \nS.list_order\n\nFROM \n(\nSELECT S.*, get_distance(''_LATITUDE_'',''_LONGITUDE_'',S.latitude, S.longitude) AS distance, \n\nIF(S.`name` = ''_PHRASE_'', 1, \nIF(S.`name` LIKE CONCAT(''_PHRASE_'', ''%''), 2, \nIF(S.`name` LIKE CONCAT(''%'', ''_PHRASE_'', ''%''), 3, \nIF(''_PHRASE_'' LIKE ''% %'' AND LENGTH(SUBSTRING_INDEX(''_PHRASE_'', '' '', 1 )) > 3 AND S.`name` LIKE CONCAT(SUBSTRING_INDEX(''_PHRASE_'', '' '', 1 ), ''%'') AND ''_LOCATION_'' LIKE CONCAT(''%'', S.`address_line_1`, ''%''), 4, \n\nIF((SELECT _store_id FROM store_sub_categories C WHERE C._sub_category_id IN (_SUB_CATEGORIES_) AND _store_id=S.id LIMIT 1) IS NOT NULL, 5,\n\nIF((SELECT _store_id FROM store_sub_categories C WHERE C._category_id IN (_CATEGORIES_) AND _store_id=S.id LIMIT 1) IS NOT NULL, 6,\n\nIF(''_LOCATION_'' LIKE CONCAT(''%'', S.`address_line_1`, ''%''), 7, \nIF((''_LOCATION_'' LIKE CONCAT(''%'', S.`city`, ''%'') AND S.`address_line_1` LIKE CONCAT(''%'',REPLACE('' '', ''% '', ''_LOCATION_''),''%'')), 8, \nIF(''_LOCATION_'' LIKE CONCAT(''%'', S.`zipcode`, ''%''), 9, \nIF(''_LOCATION_'' LIKE CONCAT(''%'', S.`city`, ''%''), 10, \n11)))))))))) AS list_order\n\nFROM promotions P \nLEFT JOIN stores S ON (P.owner_id=S.id)\nWHERE P.status=''active'' \n	AND P.owner_type=''store'' \n	AND ((''_IS_FEATURED_''=''Y'' AND (NOW() BETWEEN P.boost_start_date AND P.boost_end_date) AND P.boost_remaining > 0)\n		OR (''_IS_FEATURED_''=''N'' AND (NOW() BETWEEN P.start_date AND P.end_date))\n		)\n	AND P.owner_id NOT IN (_EXCLUDE_ID_LIST_)\n	AND (''_PHRASE_''='''' OR (''_PHRASE_'' <> '''' AND (MATCH(S.name) AGAINST (''_PHRASE_'' IN BOOLEAN MODE) \n		OR (SELECT _store_id FROM store_sub_categories C WHERE C._sub_category_id IN (_SUB_CATEGORIES_) AND _store_id=S.id LIMIT 1) IS NOT NULL\n		OR (SELECT _store_id FROM store_sub_categories C WHERE C._category_id IN (_CATEGORIES_) AND _store_id=S.id LIMIT 1) IS NOT NULL\n	)))\nGROUP BY P.owner_id \n_DISTANCE_CONDITION_ \nORDER BY distance ASC \n_LIMIT_TEXT_\n) S \n\nORDER BY _ORDER_'),
(243, 'get_intersecting_common_words', 'SELECT word FROM common_words WHERE word IN (_PHRASE_WORDS_)'),
(244, 'search_stores', 'SELECT S.id AS store_id, ''_IS_FEATURED_'' AS is_featured, \ncap_first_letter_in_words(S.name) AS name, \ncap_first_letter_in_words(S.address_line_1) AS address_line_1, \ncap_first_letter_in_words(S.address_line_2) AS address_line_2, \nS.city, S.state, S._country_code AS country, S.zipcode, S.latitude, S.longitude, LOWER(S.website) AS website, S.small_cover_image AS store_banner,  \n(SELECT _chain_id FROM store_chains WHERE _store_id=S.id LIMIT 1) AS chain_id, \n(SELECT C.small_banner FROM chains C LEFT JOIN store_chains CS ON (CS._chain_id=C.id) WHERE CS._store_id=S.id LIMIT 1) AS chain_banner,\nS.distance,\nget_store_score(''_USER_ID_'', S.id) AS store_score,\nhas_perk(''_USER_ID_'', S.id) AS has_perk,\nget_cashback_range(''_USER_ID_'', S.id, ''min'') AS min_cashback,\nget_cashback_range(''_USER_ID_'', S.id, ''max'') AS max_cashback,\nget_store_earnings(''_USER_ID_'', S.id,'''') AS store_earnings, \nIF((SELECT id FROM categories_level_1 WHERE name LIKE '''' LIMIT 1) IS NOT NULL, \n	(SELECT C1.name FROM categories_level_1 C1 WHERE  name LIKE '''' LIMIT 1), \n	(SELECT C1.name FROM categories_level_1 C1 WHERE  C1.id IN (SELECT SC._category_id FROM store_sub_categories SC WHERE SC._store_id=S.id)  LIMIT 1)\n) AS search_category, \nIF((SELECT _store_id FROM transactions WHERE _user_id=''_USER_ID_'' AND _store_id=S.id LIMIT 1) IS NOT NULL, ''Y'',''N'') AS has_shopped_here, \nS.list_order\n\nFROM \n(\nSELECT S.*, get_distance(''_LATITUDE_'',''_LONGITUDE_'',S.latitude, S.longitude) AS distance, \n\nIF(S.`name` = ''_PHRASE_'', 1, \nIF(S.`name` LIKE CONCAT(''_PHRASE_'', ''%''), 2, \nIF(S.`name` LIKE CONCAT(''%'', ''_PHRASE_'', ''%''), 3, \nIF(''_PHRASE_'' LIKE ''% %'' AND LENGTH(SUBSTRING_INDEX(''_PHRASE_'', '' '', 1 )) > 3 AND S.`name` LIKE CONCAT(SUBSTRING_INDEX(''_PHRASE_'', '' '', 1 ), ''%'') AND ''_LOCATION_'' LIKE CONCAT(''%'', S.`address_line_1`, ''%''), 4, \n\nIF((SELECT _store_id FROM store_sub_categories C WHERE C._sub_category_id IN (_SUB_CATEGORIES_) AND _store_id=S.id LIMIT 1) IS NOT NULL, 5,\nIF((SELECT _store_id FROM store_sub_categories C WHERE C._category_id IN (_CATEGORIES_) AND _store_id=S.id LIMIT 1) IS NOT NULL, 6,\n\nIF(''_LOCATION_'' LIKE CONCAT(''%'', S.`address_line_1`, ''%''), 7, \nIF((''_LOCATION_'' LIKE CONCAT(''%'', S.`city`, ''%'') AND S.`address_line_1` LIKE CONCAT(''%'',REPLACE('' '', ''% '', ''_LOCATION_''),''%'')), 8, \nIF(''_LOCATION_'' LIKE CONCAT(''%'', S.`zipcode`, ''%''), 9, \nIF(''_LOCATION_'' LIKE CONCAT(''%'', S.`city`, ''%''), 10, \n11)))))))))) AS list_order\n\nFROM stores S \nWHERE S.id NOT IN (_EXCLUDE_ID_LIST_) \n	AND S.zipcode IN (_ZIPCODE_LIST_) \n	AND (''_PHRASE_''='''' OR (''_PHRASE_'' <> '''' AND (MATCH(S.name) AGAINST (''_PHRASE_'' IN BOOLEAN MODE) \n	)))\n\n_DISTANCE_CONDITION_ \nORDER BY distance ASC\n_LIMIT_TEXT_\n) S \n\nORDER BY _ORDER_');
INSERT INTO queries (id, code, details) VALUES
(245, 'get_shopped_stores', 'SELECT S.id AS store_id, ''_IS_FEATURED_'' AS is_featured, \ncap_first_letter_in_words(S.name) AS name, \ncap_first_letter_in_words(S.address_line_1) AS address_line_1, \ncap_first_letter_in_words(S.address_line_2) AS address_line_2, \nS.city, S.state, S._country_code AS country, S.zipcode, S.latitude, S.longitude, LOWER(S.website) AS website, S.small_cover_image AS store_banner,  \n(SELECT _chain_id FROM store_chains WHERE _store_id=S.id LIMIT 1) AS chain_id, \n(SELECT C.small_banner FROM chains C LEFT JOIN store_chains CS ON (CS._chain_id=C.id) WHERE CS._store_id=S.id LIMIT 1) AS chain_banner,\nS.distance,\nget_store_score(''_USER_ID_'', S.id) AS store_score,\nhas_perk(''_USER_ID_'', S.id) AS has_perk,\nget_cashback_range(''_USER_ID_'', S.id, ''min'') AS min_cashback,\nget_cashback_range(''_USER_ID_'', S.id, ''max'') AS max_cashback,\nget_store_earnings(''_USER_ID_'', S.id,'''') AS store_earnings, \nIF((SELECT id FROM categories_level_1 WHERE name LIKE '''' LIMIT 1) IS NOT NULL, \n	(SELECT C1.name FROM categories_level_1 C1 WHERE  name LIKE '''' LIMIT 1), \n	(SELECT C1.name FROM categories_level_1 C1 WHERE  C1.id IN (SELECT SC._category_id FROM store_sub_categories SC WHERE SC._store_id=S.id)  LIMIT 1)\n) AS search_category, \nIF((SELECT _store_id FROM transactions WHERE _user_id=''_USER_ID_'' AND _store_id=S.id LIMIT 1) IS NOT NULL, ''Y'',''N'') AS has_shopped_here, \nS.list_order\n\nFROM \n(\nSELECT S.*, get_distance(''_LATITUDE_'',''_LONGITUDE_'',S.latitude, S.longitude) AS distance, \n\nIF(S.`name` = ''_PHRASE_'', 1, \nIF(S.`name` LIKE CONCAT(''_PHRASE_'', ''%''), 2, \nIF(S.`name` LIKE CONCAT(''%'', ''_PHRASE_'', ''%''), 3, \nIF(''_PHRASE_'' LIKE ''% %'' AND LENGTH(SUBSTRING_INDEX(''_PHRASE_'', '' '', 1 )) > 3 AND S.`name` LIKE CONCAT(SUBSTRING_INDEX(''_PHRASE_'', '' '', 1 ), ''%'') AND ''_LOCATION_'' LIKE CONCAT(''%'', S.`address_line_1`, ''%''), 4, \n\nIF((SELECT _store_id FROM store_sub_categories C WHERE C._sub_category_id IN (_SUB_CATEGORIES_) AND _store_id=S.id LIMIT 1) IS NOT NULL, 5,\n\nIF((SELECT _store_id FROM store_sub_categories C WHERE C._category_id IN (_CATEGORIES_) AND _store_id=S.id LIMIT 1) IS NOT NULL, 6,\n\nIF(''_LOCATION_'' LIKE CONCAT(''%'', S.`address_line_1`, ''%''), 7, \nIF((''_LOCATION_'' LIKE CONCAT(''%'', S.`city`, ''%'') AND S.`address_line_1` LIKE CONCAT(''%'',REPLACE('' '', ''% '', ''_LOCATION_''),''%'')), 8, \nIF(''_LOCATION_'' LIKE CONCAT(''%'', S.`zipcode`, ''%''), 9, \nIF(''_LOCATION_'' LIKE CONCAT(''%'', S.`city`, ''%''), 10, \n11)))))))))) AS list_order,\n\nIF((SELECT P.owner_id FROM promotions P \n    WHERE P.owner_id=C.store_id AND P.status=''active'' AND P.owner_type=''store'' \n       AND (NOW() BETWEEN P.start_date AND P.end_date) LIMIT 1) IS NOT NULL, ''Y'', ''N'') AS has_deals\nFROM cacheview__store_score_by_store C \nLEFT JOIN stores S ON (C.store_id=S.id)\nWHERE C.user_id=''_USER_ID_'' \n	AND C.store_id NOT IN (_EXCLUDE_ID_LIST_)\n	AND (''_PHRASE_''='''' OR (''_PHRASE_'' <> '''' AND (MATCH(S.name) AGAINST (''_PHRASE_'' IN BOOLEAN MODE) \n		OR (SELECT _store_id FROM store_sub_categories C WHERE C._sub_category_id IN (_SUB_CATEGORIES_) AND _store_id=S.id LIMIT 1) IS NOT NULL\n		OR (SELECT _store_id FROM store_sub_categories C WHERE C._category_id IN (_CATEGORIES_) AND _store_id=S.id LIMIT 1) IS NOT NULL\n	)))\n\n_DISTANCE_CONDITION_ AND has_deals = ''_HAS_DEALS_''\nORDER BY distance ASC\n_LIMIT_TEXT_\n) S \n\nORDER BY _ORDER_'),
(246, 'get_location_phrases', 'SELECT CONCAT(address_line_1, '' '', address_line_2, '' '', city, '' '', state, '' '', country, '' '', zipcode) AS suggestion, id \nFROM contact_addresses \nWHERE is_active=''Y'' AND _user_id=''_USER_ID_'' AND (''''=''_PHRASE_'' OR ('''' <> ''_PHRASE_'' AND MATCH(address_line_1) AGAINST (''_PHRASE_''))) \n_LIMIT_TEXT_ '),
(247, 'get_zipcodes_near_this_zipcode', 'SELECT DISTINCT zipcode, latitude, longitude, \n(SELECT latitude FROM zipcodes WHERE zipcode=''_ZIPCODE_'' LIMIT 1) AS this_latitude,\n(SELECT longitude FROM zipcodes WHERE zipcode=''_ZIPCODE_'' LIMIT 1) AS this_longitude\nFROM zipcodes \nWHERE zipcode <> ''_ZIPCODE_''\nHAVING get_distance(this_latitude,this_longitude, latitude, longitude) <= ''_DISTANCE_'''),
(248, 'get_category_matches_for_search', 'SELECT id FROM categories_level_1 WHERE name LIKE CONCAT(''%'',''_PHRASE_'',''%'')'),
(249, 'get_sub_category_matches_for_search', 'SELECT id FROM categories_level_2 WHERE MATCH(name) AGAINST (REPLACE(''_PHRASE_'','' '','' +'') IN BOOLEAN MODE)'),
(250, 'get_zipcode_details', 'SELECT * FROM zipcodes WHERE zipcode=''_ZIPCODE_'' LIMIT 1'),
(251, 'remove_favorite_store', 'DELETE FROM store_favorites WHERE _user_id=''_USER_ID_'' AND _store_id=''_STORE_ID_'''),
(252, 'get_user_access_tokens', 'SELECT DISTINCT access_token FROM plaid_access_token WHERE _user_id IN (''_USER_IDS_'')'),
(253, 'add_user_social_media', 'INSERT IGNORE INTO user_social_media (_user_id, social_media_name, user_name, status, last_ip_address, date_entered, last_updated, _last_updated_by )\n\nVALUES (''_USER_ID_'', ''_SOCIAL_MEDIA_NAME_'', ''_USER_NAME_'', ''_STATUS_'', ''_LAST_IP_ADDRESS_'', NOW(), NOW(), ''_USER_ID_'')'),
(254, 'is_rule_applied_to_user', 'SELECT \r\nIF((SELECT PR._rule_id FROM clout_v1_3iam.permission_group_mapping_rules PR \r\nLEFT JOIN clout_v1_3iam.user_access UA ON (UA.permission_group_id=PR._group_id)\r\nWHERE PR._rule_id=''_RULE_ID_'' AND UA.user_id=''_USER_ID_''\r\n) IS NOT NULL, ''Y'', ''N'') AS is_applied'),
(255, 'get_existing_user_emails', 'SELECT I.email_address FROM message_invites I WHERE (I._user_id=''_USER_ID_'' AND I.email_address IN (''_EMAIL_LIST_'')) \nOR (SELECT id FROM users WHERE email_address=I.email_address LIMIT 1) IS NOT NULL'),
(256, 'get_transaction_payees_for_search', 'SELECT DISTINCT zipcode, LOWER(state) AS state, LOWER(city) AS city, LOWER(SUBSTRING_INDEX(address, '' '', 3)) AS address, \nLOWER(IF(LENGTH(SUBSTRING_INDEX(payee_name, '' '', 1)) > 5, SUBSTRING_INDEX(payee_name, '' '', 1), \n   IF(LENGTH(SUBSTRING_INDEX(payee_name, '' '', 2)) > 8, \n   SUBSTRING_INDEX(payee_name, '' '', 2),\n   SUBSTRING_INDEX(payee_name, '' '', 3)\n))) AS name\n\nFROM transactions_raw R \nWHERE R._user_id=''_USER_ID_'' AND R.is_saved=''N''\n'),
(257, 'mongodb__search_stores', 'SELECT store_id, name, address FROM bname WHERE name LIKE ''_NAME_%'' AND zipcode=''_ZIPCODE_'' AND address LIKE ''_ADDRESS_%'' _LIMIT_TEXT_'),
(258, 'remove_temp_table', 'DROP TABLE IF EXISTS temp___TABLE_STUB_'),
(259, 'add_temp_table', 'CREATE TABLE IF EXISTS temp___TABLE_STUB_ (_DEFINITION_)'),
(260, 'add_top_searches_for_user_stores', 'INSERT INTO temp___TABLE_STUB_ (store_id, name, address, zipcode, confidence) VALUES \r\n(SELECT ''_STORE_ID_'' AS store_id, ''_REAL_NAME_'' AS name, ''_ADDRESS_'' AS address, ''_ZIPCODE_'' AS zipcode, IF(''_REAL_NAME_'' = ''_SEARCH_NAME_'', 90, 70) AS confidence)');


ALTER TABLE queries
  ADD PRIMARY KEY (id);


ALTER TABLE queries
  MODIFY id bigint(20) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=261;